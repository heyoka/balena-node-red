[{"id":"f8b2053b.e2c1b","type":"subflow","name":"Get filenamelist","info":"","in":[{"x":331.1249694824219,"y":99.36711502075195,"wires":[{"id":"414c255d.4ececc"}]}],"out":[{"x":651.1249694824219,"y":99.36711502075195,"wires":[{"id":"414c255d.4ececc","port":0}]}]},{"id":"414c255d.4ececc","type":"function","z":"f8b2053b.e2c1b","name":"Get filenamelist","func":"//=============================== begin: Header ================================\n// Author: Jürgen Buchner\n// E-Mail: Juergen.Buchner@tgw-group.com\n// Created: 08.03.2018\n// Function description: This function requests the globally available \n// filenamelist. It includes the names of the currently available .csv files on\n// the sd card.\n//=============================== end:   Header ================================\n\n//=============================== begin: Input =================================\n//===== begin: Global Variables ========\nvar asList = global.get('filenamelist');\n//===== end:   Global Variables ========\n//=============================== end:   Input =================================\n\n//=============================== begin: Function ==============================\nmsg.payload = {};\n//===== begin: Output ==================\nmsg.options = asList;\nreturn msg;\n//===== end:   Output ==================\n//=============================== end:   Function ==============================\n","outputs":1,"noerr":0,"x":491.1249694824219,"y":99.36711502075195,"wires":[[]]},{"id":"cdc50972.373978","type":"subflow","name":"Clear chart","info":"","in":[{"x":329.89844512939453,"y":339.67187118530273,"wires":[{"id":"3ea92e06.38a022"}]}],"out":[{"x":629.8984451293945,"y":339.67187118530273,"wires":[{"id":"3ea92e06.38a022","port":0}]}]},{"id":"3ea92e06.38a022","type":"function","z":"cdc50972.373978","name":"Clear chart","func":"//=============================== begin: Header ================================\n// Author: Jürgen Buchner\n// E-Mail: Juergen.Buchner@tgw-group.com\n// Created: 19.03.2018\n// Function description: This function sends the payload to clear a chart. This\n// node is triggered when receiving a message.\n//=============================== end:   Header ================================\n\n//=============================== begin: Function ==============================\n//===== begin: Output ==================\nmsg.payload = [];\nreturn msg;\n//===== end:   Output ==================\n//=============================== end:   Function ==============================","outputs":1,"noerr":0,"x":479.89844512939453,"y":339.67187118530273,"wires":[[]]},{"id":"b966c570.9f4478","type":"subflow","name":"Add Date","info":"","in":[{"x":110.33345031738281,"y":87.00003051757812,"wires":[{"id":"fbca0d54.d8d41"}]}],"out":[{"x":390.3334503173828,"y":87.00003051757812,"wires":[{"id":"fbca0d54.d8d41","port":0}]}]},{"id":"fbca0d54.d8d41","type":"function","z":"b966c570.9f4478","name":"Add Date","func":"//=============================== begin: Header ================================\n// Author: Jürgen Buchner\n// E-Mail: Juergen.Buchner@tgw-group.com\n// Created: 27.11.2017\n// Function description: - - - - - - - - - - Description - - - - - - - - - - - - \n// - - - - - - - - - - - - - - - - - - - - - Description - - - - - - - - - - - -\n// - - - - - - - - - - - - - - - - - - - - - Description - - - - - - - - - - - -\n\n// Change Date: 19.03.2018\n// Changed By: Jürgen Buchner\n// Change: add Coding Structure\n//=============================== end:   Header ================================\n\n//=============================== begin: Input =================================\n//===== begin: Message Data ============\nvar oDate = new Date(msg.timestamp);\n//===== end:   Message Data ============\n//=============================== end:   Input =================================\n\n//=============================== begin: Function ==============================\nmsg.date = oDate.toString();\n//===== begin: Output ==================\nreturn msg;\n//===== end:   Output ==================\n//=============================== end:   Function ==============================\n","outputs":1,"noerr":0,"x":250.3334503173828,"y":87.00003051757812,"wires":[[]]},{"id":"40847035.9afa08","type":"subflow","name":"Data Filter 2","info":"","in":[{"x":1263.333251953125,"y":629.0000286102295,"wires":[{"id":"a5a2236.4b32fe"}]}],"out":[{"x":1563.333251953125,"y":629.0000286102295,"wires":[{"id":"a5a2236.4b32fe","port":0}]}]},{"id":"a5a2236.4b32fe","type":"function","z":"40847035.9afa08","name":"Data Filter 2","func":"//=============================== begin: Header ================================\n// Author: Jürgen Buchner\n// E-Mail: Juergen.Buchner@tgw-group.com\n// Created: 07.03.2018\n// Function description: This function filters the data of the data message \n// based on the selection of the dropdown menu. Whenever the dropdown menu sends\n// a message, the selection is changed and the data cleared (sending \"clear\" to \n// the dashboard node (table))\n\n// Change Date: 07.03.2018\n// Changed By: Jürgen Buchner\n// Change: Applying Coding Structure\n// Change Date: 29.03.2018\n// Changed by: Jürgen Buchner\n// Change:  add && sDataClass !== \"[]\"\n//          add if (context.sLatestData !== data[sDataClass].toString()){\n//              this allows to display only changing values\n//=============================== end:   Header ================================\n\n//=============================== begin: Initialization ========================\nconst sFILTER = \"selection\";\n//=============================== end:   Initialization ========================\n\n//=============================== begin: Input =================================\n//===== begin: Message Data ============\nvar sTopic = msg.topic;\nvar dropdownSelect = msg.payload;\n//===== end:   Message Data ============\n//=============================== end:   Input =================================\n\n//=============================== begin: Function ==============================\nif(sTopic === \"dropdown\"){\n//===== begin: Output ==================\n    node.send({payload:\"clear\"});\n//===== end:   Output ==================\n    context.set(sFILTER,dropdownSelect);\n}\nelse{\n    var sDataClass = context.get(sFILTER);\n    if((typeof sDataClass === 'string' || sTopic instanceof String) && sDataClass !== \"[]\"){\n        var data = msg.payload;\n        if (context.sLatestData !== data[sDataClass].toString()){\n                msg.topic = sDataClass;\n                msg.payload = data[sDataClass];\n                context.sLatestData = data[sDataClass].toString();\n    //===== begin: Output ==================\n                return msg;\n        }\n//===== end:   Output ==================\n    }\n}\n//=============================== end:   Function ==============================","outputs":1,"noerr":0,"x":1413.333251953125,"y":629.0000286102295,"wires":[[]]},{"id":"45b781c0.c85c88","type":"subflow","name":"Data Filter","info":"","in":[{"x":1263.500244140625,"y":242.3333854675293,"wires":[{"id":"3bae0da2.7bb7d2"}]}],"out":[{"x":1563.500244140625,"y":242.3333854675293,"wires":[{"id":"3bae0da2.7bb7d2","port":0}]}]},{"id":"3bae0da2.7bb7d2","type":"function","z":"45b781c0.c85c88","name":"Data Filter","func":"//=============================== begin: Header ================================\n// Author: Jürgen Buchner\n// E-Mail: Juergen.Buchner@tgw-group.com\n// Created: 06.03.2018\n// Function description: This function filters the data of the data message \n// based on the selection of the dropdown menu. Whenever the dropdown menu sends\n// a message, the selection is changed and the data cleared (sending [] to the\n// dashboard node)\n\n// Change Date: 07.03.2018\n// Changed By: Jürgen Buchner\n// Change:  Applying Coding Structure\n//          Adding the typeof and instanceof validation for dataClass\n//=============================== end:   Header ================================\n\n//=============================== begin: Initialization ========================\nconst sFILTER = \"selection\";\n//=============================== end:   Initialization ========================\n\n//=============================== begin: Input =================================\n//===== begin: Message Data ============\nvar sTopic = msg.topic;\nvar sDropdownSelect = msg.payload;\n//===== end:   Message Data ============\n//=============================== end:   Input =================================\n\n//=============================== begin: Function ==============================\nif(sTopic === \"dropdown\"){\n//===== begin: Output ==================\n    node.send({payload:[]});\n//===== end:   Output ==================\n    context.set(sFILTER,sDropdownSelect);\n}\nelse{\n    var sDataClass = context.get(sFILTER);\n    if(typeof sDataClass === 'string' || sTopic instanceof String){\n        msg.topic = sDataClass;\n        msg.payload = msg.payload[sDataClass];\n//===== begin: Output ==================\n        return msg;\n//===== end:   Output ==================\n    }\n}\n//=============================== end:   Function ==============================","outputs":1,"noerr":0,"x":1413.500244140625,"y":242.3333854675293,"wires":[[]]},{"id":"ef65e33c.af6d1","type":"subflow","name":"Save msg to local array -> send array","info":"","in":[{"x":420.78133392333984,"y":1217.211103439331,"wires":[{"id":"8d81d4c2.32f0f"}]}],"out":[{"x":880.7813339233398,"y":1217.211103439331,"wires":[{"id":"8d81d4c2.32f0f","port":0}]}]},{"id":"8d81d4c2.32f0f","type":"function","z":"ef65e33c.af6d1","name":"Save msg to local array -> send array","func":"//=============================== begin: Header ================================\n// Author: Jürgen Buchner\n// E-Mail: Juergen.Buchner@tgw-group.com\n// Created: 28.11.2017\n// Function description: this function saves msg in a local array and sends the\n// whole array. This is done to display data in a table. The table always needs\n// the whole array.\n\n// Change Date: 19.03.2018\n// Changed By: Jürgen Buchner\n// Change: add Coding Structure\n// Change Date: 19.03.2018\n// Changed By: Jürgen Buchner\n// Change: mod size -> iSize in new Array and fill\n//=============================== end:   Header ================================\n\n//=============================== begin: Initialization ========================\nif (context.get('data')===undefined){\n    var size = 20;\n    var aoData = new Array(size);\n    aoData.fill({},0,size);\n    context.set('data',aoData);\n    //node.send({payload : data})\n}\n//=============================== end:   Initialization ========================\n\n//=============================== begin: Function ==============================\n\nif(msg.payload == \"clear\"){\n    //context.set('data',null);\n    var iSize = 20;\n    var aoData = new Array(iSize);\n    aoData.fill({},0,iSize);\n    context.set('data',aoData);\n    msg = {payload : aoData};\n}\nelse{\n    ///// Routine to add a value to the array and delete the latest\n    var array = context.get('data');\n    //node.send({payload : array})\n    array.unshift(msg); // Adding the msg at the beginning\n    array.pop(); // Removing the last item\n    //node.send({payload : array})\n    context.set('data',array);\n    msg = {payload : array};\n}\n//===== begin: Output ==================\nreturn msg;\n//===== end:   Output ==================\n//=============================== end:   Function ==============================","outputs":1,"noerr":0,"x":650.7813339233398,"y":1217.211103439331,"wires":[[]]},{"id":"1e9e5e8e.a754d1","type":"subflow","name":"Display data online (2)","info":"","in":[{"x":500,"y":140,"wires":[{"id":"c7075c8d.b93fb"}]}],"out":[]},{"id":"7648a937.444158","type":"ui_dropdown","z":"1e9e5e8e.a754d1","name":"","label":"Chart 1","place":"Select option","group":"7bbdde50.0b2858","order":1,"width":"12","height":"1","passthru":true,"options":[{"label":"","value":"","type":"str"}],"payload":"","topic":"dropdown","x":1135.8867111206055,"y":278.0234889984131,"wires":[["7e4e331a.53ec84"]]},{"id":"a1fce009.49eae8","type":"ui_dropdown","z":"1e9e5e8e.a754d1","name":"","label":"Chart 2","place":"Select option","group":"7bbdde50.0b2858","order":2,"width":"12","height":"1","passthru":true,"options":[{"label":"","value":"","type":"str"}],"payload":"","topic":"dropdown","x":1135.76953125,"y":309.00390625,"wires":[["b6f44649.301e48"]]},{"id":"c7075c8d.b93fb","type":"function","z":"1e9e5e8e.a754d1","name":"Message Demultiplexer","func":"//=============================== begin: Header ================================\n// Author: Jürgen Buchner\n// E-Mail: Juergen.Buchner@tgw-group.com\n// Created: 06.03.2018\n// Function description: This function directes the messages to the desired\n// nodes, basically like a demultiplexer. One message type sets the dropdown \n// options including the data class names. The other message type includes the \n// data\n\n// Change Date: 07.03.2018\n// Changed By: Jürgen Buchner\n// Change: Applying Coding Structure\n//=============================== end:   Header ================================\n\n//=============================== begin: Input =================================\n//===== begin: Message Data ============\nvar oOptions = msg.options;\n//===== end:   Message Data ============\n//=============================== end:   Input =================================\n\n//=============================== begin: Function ==============================\nif(oOptions === undefined){\n//===== begin: Output ==================\n    return [msg,null];\n//===== end:   Output ==================\n}\nelse{\n//===== begin: Output ==================\n    return [null,msg];\n//===== end:   Output ==================\n}\n//=============================== end:   Function ==============================","outputs":"2","noerr":0,"x":670,"y":140,"wires":[["2d6c121b.9c531e","1db92d50.4c6d3b","7e4e331a.53ec84","b6f44649.301e48","bc0103d2.4a0e9","e6f59f52.68c93","9126eab7.e3feb8","4461d9f.7671528","64bab13e.f8495","e2069816.ffbe58","3da626b4.3c4d1a","ddde6165.f41fe8","7c9f5156.ee2e68","1ee0e029.0b1e28","812bdf6.bdf0ba","c7564cc1.eb7f98","c5e63d3f.f2b4a8"],["7648a937.444158","a1fce009.49eae8","30338fd3.487c8","a2572c9d.03817","483aee5a.fb085","3fb2f05d.5ab7b8","bffea1ba.cd34b","d4876d67.3c137","bb10b60d.4d7ec8","8b19856.57c4178","450d06d5.22a46","b3069ad3.8a80e","4288e136.fb14f","3f21bf99.a41598"]]},{"id":"30338fd3.487c8","type":"ui_dropdown","z":"1e9e5e8e.a754d1","name":"","label":"Chart 3.1","place":"Select option","group":"7bbdde50.0b2858","order":5,"width":"6","height":"1","passthru":true,"options":[{"label":"","value":"","type":"str"}],"payload":"","topic":"dropdown","x":1136.333251953125,"y":340,"wires":[["bc0103d2.4a0e9"]]},{"id":"a2572c9d.03817","type":"ui_dropdown","z":"1e9e5e8e.a754d1","name":"","label":"Chart 3.2","place":"Select option","group":"7bbdde50.0b2858","order":6,"width":"6","height":"1","passthru":true,"options":[{"label":"","value":"","type":"str"}],"payload":"","topic":"dropdown","x":1136.333251953125,"y":371,"wires":[["e6f59f52.68c93"]]},{"id":"483aee5a.fb085","type":"ui_dropdown","z":"1e9e5e8e.a754d1","name":"","label":"Table 1","place":"Select option","group":"100216f0.7c8699","order":2,"width":"12","height":"1","passthru":true,"options":[{"label":"","value":"","type":"str"}],"payload":"","topic":"dropdown","x":1136.3333358764648,"y":665.0000305175781,"wires":[["1ee0e029.0b1e28"]]},{"id":"3bcf40ae.6103f8","type":"subflow:ef65e33c.af6d1","z":"1e9e5e8e.a754d1","name":"","x":1822.5001754760742,"y":665.3334426879883,"wires":[["d98b2ee4.cde6f8"]]},{"id":"40f8e8df.cb8ae8","type":"ui_template","z":"1e9e5e8e.a754d1","group":"100216f0.7c8699","name":"MFR Table","order":1,"width":"24","height":"6","format":"<table style=\"width:100%\">\n  <tr>\n    <th>MFR-Log</th> \n  </tr>\n  <tr ng-repeat=\"x in msg.payload | limitTo:20\">\n    <td>{{msg.payload[$index].payload}}</td> \n  </tr>\n</table>","storeOutMessages":true,"fwdInMessages":true,"templateScope":"local","x":2071.3333473205566,"y":136.00019645690918,"wires":[[]]},{"id":"2d6c121b.9c531e","type":"function","z":"1e9e5e8e.a754d1","name":"Filter for MFR Stream","func":"//=============================== begin: Header ================================\n// Author: Jürgen Buchner\n// E-Mail: Juergen.Buchner@tgw-group.com\n// Created: 07.03.2018\n// Function description: This function filters MFR messages from the TCP stream.\n\n// Change Date: 19.03.2018\n// Changed By: Jürgen Buchner\n// Change: add Coding Structure\n//=============================== end:   Header ================================\n\n//=============================== begin: Input =================================\n//===== begin: Message Data ============\nsTopic = msg.topic;\n//===== end:   Message Data ============\n//=============================== end:   Input =================================\n\n//=============================== begin: Function ==============================\nif(sTopic === \"TCP\"){\n//===== begin: Output ==================\n    return msg;\n//===== end:   Output ==================\n}\n//=============================== end:   Function ==============================","outputs":1,"noerr":0,"x":1443.333251953125,"y":136,"wires":[["5c8f5e85.6509e"]]},{"id":"5c8f5e85.6509e","type":"subflow:ef65e33c.af6d1","z":"1e9e5e8e.a754d1","name":"","x":1822.333251953125,"y":136,"wires":[["40f8e8df.cb8ae8"]]},{"id":"daef32f0.cb3638","type":"ui_chart","z":"1e9e5e8e.a754d1","name":"","group":"7bbdde50.0b2858","order":3,"width":"12","height":"6","label":"Chart 1","chartType":"line","legend":"false","xformat":"HH:mm:ss","interpolate":"linear","nodata":"","dot":false,"ymin":"","ymax":"","removeOlder":"1","removeOlderPoints":"100","removeOlderUnit":"604800","cutout":0,"useOneColor":false,"colors":["#1f77b4","#ff8040","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":2,"x":2061.333251953125,"y":278,"wires":[[],[]]},{"id":"34a1d33c.4d9974","type":"ui_chart","z":"1e9e5e8e.a754d1","name":"","group":"7bbdde50.0b2858","order":4,"width":"12","height":"6","label":"Chart 2","chartType":"line","legend":"false","xformat":"HH:mm:ss","interpolate":"linear","nodata":"","dot":false,"ymin":"","ymax":"","removeOlder":"1","removeOlderPoints":"100","removeOlderUnit":"604800","cutout":0,"useOneColor":false,"colors":["#1f77b4","#ff8040","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":2,"x":2061.2160720825195,"y":308.9804172515869,"wires":[[],[]]},{"id":"d655b004.4b66b","type":"ui_chart","z":"1e9e5e8e.a754d1","name":"","group":"7bbdde50.0b2858","order":9,"width":"12","height":"6","label":"Chart 3","chartType":"line","legend":"true","xformat":"HH:mm:ss","interpolate":"step","nodata":"","dot":false,"ymin":"","ymax":"","removeOlder":"1","removeOlderPoints":"100","removeOlderUnit":"604800","cutout":0,"useOneColor":false,"colors":["#008000","#ff8040","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":2,"x":2061.7797927856445,"y":339.9765110015869,"wires":[[],[]]},{"id":"3fb2f05d.5ab7b8","type":"ui_dropdown","z":"1e9e5e8e.a754d1","name":"","label":"Table 2","place":"Select option","group":"100216f0.7c8699","order":3,"width":"12","height":"1","passthru":true,"options":[{"label":"","value":"","type":"str"}],"payload":"","topic":"dropdown","x":1137,"y":696,"wires":[["812bdf6.bdf0ba"]]},{"id":"670b9f8d.9ac52","type":"subflow:ef65e33c.af6d1","z":"1e9e5e8e.a754d1","name":"","x":1823.1668395996094,"y":696.3334121704102,"wires":[["f9d4323d.84e258"]]},{"id":"f9d4323d.84e258","type":"ui_template","z":"1e9e5e8e.a754d1","group":"100216f0.7c8699","name":"Table 2","order":5,"width":"12","height":"6","format":"<head>\n  <style rel=\"stylesheet\" type=\"text/css\">\ncaption {\n    font-weight: bold;  \n    font-size:18px;\n}\n</style>\n</head>\n\n<table style=\"width:100%\">\n<caption>Table 2</caption>\n  <tr>\n    <th>Date</th>\n    <th>Value</th> \n  </tr>\n  <tr ng-repeat=\"x in msg.payload | limitTo:20\">\n    <td>{{msg.payload[$index].date}}</td>\n    <td>{{msg.payload[$index].payload}}</td> \n  </tr>\n</table>","storeOutMessages":true,"fwdInMessages":true,"templateScope":"local","x":2060.99991607666,"y":695.9999694824219,"wires":[[]]},{"id":"d98b2ee4.cde6f8","type":"ui_template","z":"1e9e5e8e.a754d1","group":"100216f0.7c8699","name":"Table 1","order":4,"width":"12","height":"6","format":"<head>\n  <style rel=\"stylesheet\" type=\"text/css\">\ncaption {\n    font-weight: bold;  \n    font-size:18px;\n}\n</style>\n</head>\n\n<table style=\"width:100%\">\n<caption>Table 1</caption>\n  <tr>\n    <th>Date</th>\n    <th>Value</th> \n  </tr>\n  <tr ng-repeat=\"x in msg.payload | limitTo:20\">\n    <td>{{msg.payload[$index].date}}</td>\n    <td>{{msg.payload[$index].payload}}</td> \n  </tr>\n</table>","storeOutMessages":true,"fwdInMessages":true,"templateScope":"local","x":2060.333251953125,"y":665,"wires":[[]]},{"id":"bffea1ba.cd34b","type":"ui_dropdown","z":"1e9e5e8e.a754d1","name":"","label":"Table 3","place":"Select option","group":"100216f0.7c8699","order":6,"width":"12","height":"1","passthru":true,"options":[{"label":"","value":"","type":"str"}],"payload":"","topic":"dropdown","x":1137,"y":727,"wires":[["c7564cc1.eb7f98"]]},{"id":"725b48b5.187a88","type":"subflow:ef65e33c.af6d1","z":"1e9e5e8e.a754d1","name":"","x":1823.1668395996094,"y":727.3334121704102,"wires":[["8c282c1c.c624b8"]]},{"id":"d4876d67.3c137","type":"ui_dropdown","z":"1e9e5e8e.a754d1","name":"","label":"Table 4","place":"Select option","group":"100216f0.7c8699","order":7,"width":"12","height":"1","passthru":true,"options":[{"label":"","value":"","type":"str"}],"payload":"","topic":"dropdown","x":1137,"y":757,"wires":[["c5e63d3f.f2b4a8"]]},{"id":"adfe14ed.a77b88","type":"subflow:ef65e33c.af6d1","z":"1e9e5e8e.a754d1","name":"","x":1823.1668395996094,"y":757.3334121704102,"wires":[["589501ae.b1f138"]]},{"id":"8c282c1c.c624b8","type":"ui_template","z":"1e9e5e8e.a754d1","group":"100216f0.7c8699","name":"Table 3","order":8,"width":"12","height":"6","format":"<head>\n  <style rel=\"stylesheet\" type=\"text/css\">\ncaption {\n    font-weight: bold;  \n    font-size:18px;\n}\n</style>\n</head>\n\n<table style=\"width:100%\">\n<caption>Table 3</caption>\n  <tr>\n    <th>Date</th>\n    <th>Value</th> \n  </tr>\n  <tr ng-repeat=\"x in msg.payload | limitTo:20\">\n    <td>{{msg.payload[$index].date}}</td>\n    <td>{{msg.payload[$index].payload}}</td> \n  </tr>\n</table>","storeOutMessages":true,"fwdInMessages":true,"templateScope":"local","x":2060,"y":727,"wires":[[]]},{"id":"589501ae.b1f138","type":"ui_template","z":"1e9e5e8e.a754d1","group":"100216f0.7c8699","name":"Table 4","order":9,"width":"12","height":"6","format":"<head>\n  <style rel=\"stylesheet\" type=\"text/css\">\ncaption {\n    font-weight: bold;  \n    font-size:18px;\n}\n</style>\n</head>\n\n<table style=\"width:100%\">\n<caption>Table 4</caption>\n  <tr>\n    <th>Date</th>\n    <th>Value</th> \n  </tr>\n  <tr ng-repeat=\"x in msg.payload | limitTo:20\">\n    <td>{{msg.payload[$index].date}}</td>\n    <td>{{msg.payload[$index].payload}}</td> \n  </tr>\n</table>","storeOutMessages":true,"fwdInMessages":true,"templateScope":"local","x":2059,"y":758,"wires":[[]]},{"id":"bb10b60d.4d7ec8","type":"ui_dropdown","z":"1e9e5e8e.a754d1","name":"","label":"Chart 4.1","place":"Select option","group":"7bbdde50.0b2858","order":7,"width":"6","height":"1","passthru":true,"options":[{"label":"","value":"","type":"str"}],"payload":"","topic":"dropdown","x":1135.7797927856445,"y":400.9765110015869,"wires":[["9126eab7.e3feb8"]]},{"id":"8b19856.57c4178","type":"ui_dropdown","z":"1e9e5e8e.a754d1","name":"","label":"Chart 4.2","place":"Select option","group":"7bbdde50.0b2858","order":8,"width":"6","height":"1","passthru":true,"options":[{"label":"","value":"","type":"str"}],"payload":"","topic":"dropdown","x":1135.7797927856445,"y":430.9765110015869,"wires":[["4461d9f.7671528"]]},{"id":"4825e6a1.ca4a6","type":"ui_chart","z":"1e9e5e8e.a754d1","name":"","group":"7bbdde50.0b2858","order":10,"width":"12","height":"6","label":"Chart 4","chartType":"line","legend":"true","xformat":"HH:mm:ss","interpolate":"step","nodata":"","dot":false,"ymin":"","ymax":"","removeOlder":"1","removeOlderPoints":"100","removeOlderUnit":"604800","cutout":0,"useOneColor":false,"colors":["#008000","#ff8040","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":2,"x":2061.226333618164,"y":370.9530220031738,"wires":[[],[]]},{"id":"5fcff5a1.da12dc","type":"ui_template","z":"1e9e5e8e.a754d1","group":"ce6f1f17.ebeb9","name":"LED 1","order":2,"width":"2","height":"1","format":"<div layout=\"row\" layout-align=\"space-between center\">\n\n    <!--<p flex>{{msg.topic}}</p>-->\n\n    <ng-md-icon icon=\"lens\" ng-style=\"{fill:msg.payload==true?'green':'grey'}\" size=\"32\"></ng-md-icon>\n\n</div>","storeOutMessages":true,"fwdInMessages":true,"templateScope":"local","x":2051.0235710144043,"y":878.0547103881836,"wires":[[]]},{"id":"450d06d5.22a46","type":"ui_dropdown","z":"1e9e5e8e.a754d1","name":"","label":"LED 1","place":"Select option","group":"ce6f1f17.ebeb9","order":1,"width":"10","height":"1","passthru":true,"options":[{"label":"","value":"","type":"str"}],"payload":"","topic":"dropdown","x":1127.0234375,"y":878.0546875,"wires":[["e2069816.ffbe58"]]},{"id":"954e6f04.dad7f8","type":"ui_template","z":"1e9e5e8e.a754d1","group":"ce6f1f17.ebeb9","name":"LED 2","order":4,"width":"2","height":"1","format":"<div layout=\"row\" layout-align=\"space-between center\">\n\n    <!--<p flex>{{msg.topic}}</p>-->\n\n    <ng-md-icon icon=\"lens\" ng-style=\"{fill:msg.payload==true?'green':'grey'}\" size=\"32\"></ng-md-icon>\n\n</div>","storeOutMessages":true,"fwdInMessages":true,"templateScope":"local","x":2051.01953125,"y":907.00390625,"wires":[[]]},{"id":"b3069ad3.8a80e","type":"ui_dropdown","z":"1e9e5e8e.a754d1","name":"","label":"LED 2","place":"Select option","group":"ce6f1f17.ebeb9","order":3,"width":"10","height":"1","passthru":true,"options":[{"label":"","value":"","type":"str"}],"payload":"","topic":"dropdown","x":1127.0193977355957,"y":907.0038833618164,"wires":[["3da626b4.3c4d1a"]]},{"id":"a2565e89.5ad22","type":"ui_template","z":"1e9e5e8e.a754d1","group":"ce6f1f17.ebeb9","name":"LED 3","order":6,"width":"2","height":"1","format":"<div layout=\"row\" layout-align=\"space-between center\">\n\n    <!--<p flex>{{msg.topic}}</p>-->\n\n    <ng-md-icon icon=\"lens\" ng-style=\"{fill:msg.payload==true?'green':'grey'}\" size=\"32\"></ng-md-icon>\n\n</div>","storeOutMessages":true,"fwdInMessages":true,"templateScope":"local","x":2051.01953125,"y":937.00390625,"wires":[[]]},{"id":"4288e136.fb14f","type":"ui_dropdown","z":"1e9e5e8e.a754d1","name":"","label":"LED 3","place":"Select option","group":"ce6f1f17.ebeb9","order":5,"width":"10","height":"1","passthru":true,"options":[{"label":"","value":"","type":"str"}],"payload":"","topic":"dropdown","x":1127.0193977355957,"y":937.0038833618164,"wires":[["ddde6165.f41fe8"]]},{"id":"da831b28.fe31d8","type":"ui_template","z":"1e9e5e8e.a754d1","group":"ce6f1f17.ebeb9","name":"LED 4","order":8,"width":"2","height":"1","format":"<div layout=\"row\" layout-align=\"space-between center\">\n\n    <!--<p flex>{{msg.topic}}</p>-->\n\n    <ng-md-icon icon=\"lens\" ng-style=\"{fill:msg.payload==true?'green':'grey'}\" size=\"32\"></ng-md-icon>\n\n</div>","storeOutMessages":true,"fwdInMessages":true,"templateScope":"local","x":2050.01953125,"y":966.00390625,"wires":[[]]},{"id":"3f21bf99.a41598","type":"ui_dropdown","z":"1e9e5e8e.a754d1","name":"","label":"LED 4","place":"Select option","group":"ce6f1f17.ebeb9","order":7,"width":"10","height":"1","passthru":true,"options":[{"label":"","value":"","type":"str"}],"payload":"","topic":"dropdown","x":1126.0193977355957,"y":966.0038833618164,"wires":[["7c9f5156.ee2e68"]]},{"id":"b775a32d.cd25f","type":"ui_text","z":"1e9e5e8e.a754d1","group":"33155e9f.b13d02","order":1,"width":"20","height":"1","name":"","label":"Local Time & Date: ","format":"{{msg.payload}}","layout":"row-left","x":2090.333288192749,"y":24,"wires":[]},{"id":"f6cdc17.c541ec","type":"function","z":"1e9e5e8e.a754d1","name":"LocalTimeToUTCString","func":"//=============================== begin: Header ================================\n// Author: Jürgen Buchner\n// E-Mail: Juergen.Buchner@tgw-group.com\n// Created: ...\n// Function description: Preparing time for User Interface to a human readable \n// format\n//\n// Change Date: 03.04.2018\n// Changed by: Jürgen Buchner\n// Change:  add Coding Structure\n//          mod only local time\n//=============================== end:   Header ================================\n\n//=============================== begin: Function ==============================\n// Local time\nvar oDateLocal = new Date();\nmsg.payload = oDateLocal.toUTCString();\n\n//===== begin: Output ==================\nreturn [msg];\n//===== end:   Output ==================\n//=============================== end:   Function ==============================\n","outputs":"1","noerr":0,"x":1453.3958625793457,"y":25.17366600036621,"wires":[["b775a32d.cd25f"]]},{"id":"6ad9e70.969fc18","type":"ui_text","z":"1e9e5e8e.a754d1","group":"33155e9f.b13d02","order":3,"width":"20","height":"1","name":"","label":"Synchonized Time & Date: ","format":"{{msg.payload}}","layout":"row-left","x":2118.26953125,"y":55.00390625,"wires":[]},{"id":"ec3a2563.89b238","type":"inject","z":"1e9e5e8e.a754d1","name":"","topic":"","payload":"","payloadType":"date","repeat":"1","crontab":"","once":false,"x":1126.3958930969238,"y":24.7916259765625,"wires":[["f6cdc17.c541ec"]]},{"id":"1db92d50.4c6d3b","type":"function","z":"1e9e5e8e.a754d1","name":"SyncTimeToUTCString","func":"//=============================== begin: Header ================================\n// Author: Jürgen Buchner\n// E-Mail: Juergen.Buchner@tgw-group.com\n// Created: ...\n// Function description: Preparing time for User Interface to a human readable \n// format\n//\n// Change Date: 03.04.2018\n// Changed by: Jürgen Buchner\n// Change: add Coding Structure\n//=============================== end:   Header ================================\n\n//=============================== begin: Input =================================\n//===== begin: Message Data ============\nvar iSyncTimestamp = msg.timestamp;\n//===== end:   Message Data ============\n//=============================== end:   Input =================================\n\n//=============================== begin: Function ==============================\n\n// Synchronized time\nvar oDate = new Date(iSyncTimestamp);\nvar msg = { payload: oDate.toUTCString()};\n\n//===== begin: Output ==================\nreturn msg;\n//===== end:   Output ==================\n//=============================== end:   Function ==============================","outputs":1,"noerr":0,"x":1442.3631057739258,"y":55.89954376220703,"wires":[["6ad9e70.969fc18"]]},{"id":"7e4e331a.53ec84","type":"subflow:45b781c0.c85c88","z":"1e9e5e8e.a754d1","name":"","x":1413.500244140625,"y":278.3333854675293,"wires":[["daef32f0.cb3638"]]},{"id":"b6f44649.301e48","type":"subflow:45b781c0.c85c88","z":"1e9e5e8e.a754d1","x":1414,"y":309,"wires":[["34a1d33c.4d9974"]]},{"id":"bc0103d2.4a0e9","type":"subflow:45b781c0.c85c88","z":"1e9e5e8e.a754d1","x":1414,"y":340,"wires":[["d655b004.4b66b"]]},{"id":"e6f59f52.68c93","type":"subflow:45b781c0.c85c88","z":"1e9e5e8e.a754d1","x":1415,"y":371,"wires":[["d655b004.4b66b"]]},{"id":"9126eab7.e3feb8","type":"subflow:45b781c0.c85c88","z":"1e9e5e8e.a754d1","name":"","x":1415,"y":401,"wires":[["4825e6a1.ca4a6"]]},{"id":"4461d9f.7671528","type":"subflow:45b781c0.c85c88","z":"1e9e5e8e.a754d1","name":"","x":1415,"y":432,"wires":[["4825e6a1.ca4a6"]]},{"id":"1ee0e029.0b1e28","type":"subflow:40847035.9afa08","z":"1e9e5e8e.a754d1","name":"","x":1413.333251953125,"y":665.0000286102295,"wires":[["90b0f60d.19409"]]},{"id":"812bdf6.bdf0ba","type":"subflow:40847035.9afa08","z":"1e9e5e8e.a754d1","x":1414,"y":696,"wires":[["ebef77b8.b4098"]]},{"id":"c7564cc1.eb7f98","type":"subflow:40847035.9afa08","z":"1e9e5e8e.a754d1","x":1415,"y":727,"wires":[["6016de00.9630d4"]]},{"id":"c5e63d3f.f2b4a8","type":"subflow:40847035.9afa08","z":"1e9e5e8e.a754d1","x":1415,"y":757,"wires":[["97bd837d.a1bd48"]]},{"id":"90b0f60d.19409","type":"subflow:b966c570.9f4478","z":"1e9e5e8e.a754d1","name":"","x":1580.3333435058594,"y":665.0000286102295,"wires":[["3bcf40ae.6103f8"]]},{"id":"ebef77b8.b4098","type":"subflow:b966c570.9f4478","z":"1e9e5e8e.a754d1","x":1581,"y":696,"wires":[["670b9f8d.9ac52"]]},{"id":"6016de00.9630d4","type":"subflow:b966c570.9f4478","z":"1e9e5e8e.a754d1","name":"","x":1581,"y":727,"wires":[["725b48b5.187a88"]]},{"id":"97bd837d.a1bd48","type":"subflow:b966c570.9f4478","z":"1e9e5e8e.a754d1","name":"","x":1581,"y":757,"wires":[["adfe14ed.a77b88"]]},{"id":"36ee68b7.fc1158","type":"ui_text","z":"1e9e5e8e.a754d1","group":"33155e9f.b13d02","order":2,"width":"20","height":"1","name":"","label":"SPS Time & Date: ","format":"{{msg.payload}}","layout":"row-left","x":2088.51953125,"y":86.00390625,"wires":[]},{"id":"64bab13e.f8495","type":"function","z":"1e9e5e8e.a754d1","name":"SPSTimeToUTCString","func":"//=============================== begin: Header ================================\n// Author: Jürgen Buchner\n// E-Mail: Juergen.Buchner@tgw-group.com\n// Created: ...\n// Function description: Preparing time for User Interface to a human readable \n// format\n//\n// Change Date: 03.04.2018\n// Changed by: Jürgen Buchner\n// Change: add Coding Structure\n//=============================== end:   Header ================================\n\n//=============================== begin: Input =================================\n//===== begin: Message Data ============\nvar iSPSTimestamp = msg.SPSTime;\n//===== end:   Message Data ============\n//=============================== end:   Input =================================\n\n//=============================== begin: Function ==============================\n\n// Synchronized time\nvar oDate = new Date(iSPSTimestamp);\nvar msg = { payload: oDate.toUTCString()};\n\n//===== begin: Output ==================\nreturn msg;\n//===== end:   Output ==================\n//=============================== end:   Function ==============================","outputs":1,"noerr":0,"x":1443.2695274353027,"y":86.00390815734863,"wires":[["36ee68b7.fc1158"]]},{"id":"54263d6a.516dec","type":"link in","z":"1e9e5e8e.a754d1","name":"","links":["78d5f3c2.eadb5c"],"x":1910.5002479553223,"y":322.666690826416,"wires":[["4825e6a1.ca4a6","d655b004.4b66b","34a1d33c.4d9974","daef32f0.cb3638"]]},{"id":"78d5f3c2.eadb5c","type":"link out","z":"1e9e5e8e.a754d1","name":"","links":["54263d6a.516dec"],"x":895,"y":560,"wires":[]},{"id":"7972ea51.262a5c","type":"ui_button","z":"1e9e5e8e.a754d1","name":"","group":"33155e9f.b13d02","order":6,"width":"3","height":"1","passthru":false,"label":"Clear Data","color":"","bgcolor":"","icon":"","payload":"[]","payloadType":"str","topic":"","x":570,"y":560,"wires":[["1fe0ef7a.603739","7648a937.444158","a1fce009.49eae8","30338fd3.487c8","a2572c9d.03817","bb10b60d.4d7ec8","8b19856.57c4178","483aee5a.fb085","3fb2f05d.5ab7b8","bffea1ba.cd34b","d4876d67.3c137","450d06d5.22a46","b3069ad3.8a80e","4288e136.fb14f","3f21bf99.a41598"]]},{"id":"1fe0ef7a.603739","type":"subflow:cdc50972.373978","z":"1e9e5e8e.a754d1","name":"","x":790,"y":560,"wires":[["78d5f3c2.eadb5c"]]},{"id":"3da626b4.3c4d1a","type":"subflow:45b781c0.c85c88","z":"1e9e5e8e.a754d1","x":1414.6392135620117,"y":906.8681049346924,"wires":[["954e6f04.dad7f8"]]},{"id":"ddde6165.f41fe8","type":"subflow:45b781c0.c85c88","z":"1e9e5e8e.a754d1","x":1414.5729141235352,"y":937.01038646698,"wires":[["a2565e89.5ad22"]]},{"id":"7c9f5156.ee2e68","type":"subflow:45b781c0.c85c88","z":"1e9e5e8e.a754d1","x":1414.5728378295898,"y":966.0103750228882,"wires":[["da831b28.fe31d8"]]},{"id":"e2069816.ffbe58","type":"subflow:45b781c0.c85c88","z":"1e9e5e8e.a754d1","x":1414.5728855133057,"y":878.0103549957275,"wires":[["5fcff5a1.da12dc"]]},{"id":"7bbdde50.0b2858","type":"ui_group","z":"","name":"Charts","tab":"811fde28.889d88","order":2,"disp":true,"width":"24"},{"id":"100216f0.7c8699","type":"ui_group","z":"","name":"Tables","tab":"811fde28.889d88","order":3,"disp":true,"width":"24"},{"id":"ce6f1f17.ebeb9","type":"ui_group","z":"1e9e5e8e.a754d1","name":"LEDs","tab":"811fde28.889d88","order":4,"disp":true,"width":"24"},{"id":"33155e9f.b13d02","type":"ui_group","z":"","name":"Header","tab":"811fde28.889d88","order":1,"disp":true,"width":"24"},{"id":"811fde28.889d88","type":"ui_tab","z":"","name":"Online Data","icon":"dashboard","order":1},{"id":"383e4cc7.b8b594","type":"tab","label":"Blackbox"},{"id":"d1c569fe.4eb1e","type":"function","z":"383e4cc7.b8b594","name":"General Parameters","func":"//=============================== begin: Header ================================\n// Author: Jürgen Buchner\n// E-Mail: Juergen.Buchner@tgw-group.com\n// Created: 29.01.2018\n// Function description: This function is desired as input of general parameters \n// dependent of the requirements of TGW departments such as TGW Software, \n// Mechanics, LTS, TQM, etc. It also depends on the RBG Type.\n// These parameters define critical errors (as trigger to store all data), how \n// often local data buffers should be stored to the SD card(e.g. all 20 minutes)\n// and where the SD card is mounted (filepath). If bDiff is false, all values\n// are stored. Even if they are the same.\n// Change Date: 10.04.2018\n// Changed By: Jürgen Buchner\n// Change:  add bDiff functionality\n//=============================== end:   Header ================================\n\n//=============================== begin: Input =================================\n//===== begin: Parameters ==============\nglobal.set(\"sFILEPATH\", \"/mnt/sdCard/\"); // Location of SD card reader\nflow.set(\"iCYCLETIMESAVE\", 20); // [min] How often is written to the SD card for each data class\nflow.set(\"asCRITICALERRORS\", [1]); // these errors can trigger to save all data buffers\nglobal.set(\"SPSUTCTimeYear2Hour\",\"UTCTimeYear2Hour\");\nglobal.set(\"SPSUTCTimeMinute2mSec\",\"UTCTimeMinute2mSec\");\nglobal.set(\"NTPServerIP\",\"213.235.200.199\");\nflow.set(\"NTPisDisabled\",true);\n//===== end:   Parameters ==============\n\n//===== begin: Global Variables ========\nflow.set(\"bInitialization\",true);\nflow.set(\"bDiff\",true); // if true, save only data if it changes\n//===== end:   Global Variables ========\n//=============================== end:   Input =================================","outputs":1,"noerr":0,"x":951.1666870117188,"y":107.33334350585938,"wires":[[]]},{"id":"dc53516c.a3c928","type":"function","z":"383e4cc7.b8b594","name":"Storage Parameters","func":"//=============================== begin: Header ================================\n// Author: Jürgen Buchner\n// E-Mail: Juergen.Buchner@tgw-group.com\n// Created: 29.01.2018\n// Function description: This function is desired as input of parameters \n// dependent of the requirements of TGW departments such as TGW Software, \n// Mechanics, LTS, TQM, etc. \n// These parameters set which data classes (DMS, xActPos,...) are stored, at \n// which cycle time they are acquired and for how long they are stored.\n// Note: For data class cycle times, choose its multiple of the minor cycle time!\n// In addition to the PLC parameters, other data is also specified here, such as\n// MFR data via TCP or the cpu temperature of the blackbox. To add new data it\n// needs to be specified here and the input node needs to be added and connected.\n// Change Date: 09.04.2018\n// Changed By: Jürgen Buchner\n// Change:  add asOtherData\n//=============================== end:   Header ================================\n\n//=============================== begin: Input =================================\n//===== begin: Parameters ==============\n// [days] Ringbuffer size for each data class\nvar jiDATASTORAGEDAYS = {\n\t\"TrvDrv.OpHrRet\":365,\n\t\"TrvDrv.OpHr\":365,\n\t\"TrvDrv.DstRet\":365,\n\t\"TrvDrv.Dst\":365,\n\t\"TrvDrv.ErrorCode\":365,\n\t\"TrvDrv.ActPos\":365,\n\t\"TrvDrv.ActVelo\":365,\n\t\"TrvDrv.TargetPos\":365,\n\t\"TrvDrv.SetpVelo\":365,\n\t\"TrvDrv.SetpAcc\":365,\n\t\"TrvDrv.SetpDec\":365,\n\t\"TrvDrv.ActMotorPos\":365,\n\t\"TrvDrv.ActMotorTorque\":365,\n\t\"LiftDrv.OpHrRet\":365,\n\t\"LiftDrv.OpHr\":365,\n\t\"LiftDrv.DstRet\":365,\n\t\"LiftDrv.Dst\":365,\n\t\"LiftDrv.ErrorCode\":365,\n\t\"LiftDrv.ActPos\":365,\n\t\"LiftDrv.ActVelo\":365,\n\t\"LiftDrv.TargetPos\":365,\n\t\"LiftDrv.SetpVelo\":365,\n\t\"LiftDrv.SetpAcc\":365,\n\t\"LiftDrv.SetpDec\":365,\n\t\"LiftDrv.ActMotorPos\":365,\n\t\"LiftDrv.ActMotorTorque\":365,\n\t\"UTCTimeYear2Hour\":365,\n\t\"UTCTimeMinute2mSec\":365\n};\nflow.set(\"jiDATASTORAGEDAYS\",jiDATASTORAGEDAYS); \n// [ms] acquisition cycle times for each data class\nvar jiDATACYCLETIMES = {\n\t\"TrvDrv.OpHrRet\":1000,\n\t\"TrvDrv.OpHr\":1000,\n\t\"TrvDrv.DstRet\":1000,\n\t\"TrvDrv.Dst\":1000,\n\t\"TrvDrv.ErrorCode\":100,\n\t\"TrvDrv.ActPos\":100,\n\t\"TrvDrv.ActVelo\":100,\n\t\"TrvDrv.TargetPos\":100,\n\t\"TrvDrv.SetpVelo\":100,\n\t\"TrvDrv.SetpAcc\":100,\n\t\"TrvDrv.SetpDec\":100,\n\t\"TrvDrv.ActMotorPos\":100,\n\t\"TrvDrv.ActMotorTorque\":100,\n\t\"LiftDrv.OpHrRet\":1000,\n\t\"LiftDrv.OpHr\":1000,\n\t\"LiftDrv.DstRet\":1000,\n\t\"LiftDrv.Dst\":1000,\n\t\"LiftDrv.ErrorCode\":100,\n\t\"LiftDrv.ActPos\":100,\n\t\"LiftDrv.ActVelo\":100,\n\t\"LiftDrv.TargetPos\":100,\n\t\"LiftDrv.SetpVelo\":100,\n\t\"LiftDrv.SetpAcc\":100,\n\t\"LiftDrv.SetpDec\":100,\n\t\"LiftDrv.ActMotorPos\":100,\n\t\"LiftDrv.ActMotorTorque\":100,\n\t\"UTCTimeYear2Hour\":365,\n\t\"UTCTimeMinute2mSec\":365};\n\n// Extra data which does not come from the PLC communication RFC 1006\nvar asOtherData = [];\nasOtherData[0] = \"MFR-Log\";\nasOtherData[1] = \"BB.CPU.Temp\";\nasOtherData[2] = \"BB.CPU.Utilization\";\n// Add new data here: data from the GPIOs, sensors with Ethernet interface etc.\n//===== end:   Parameters ==============\n//=============================== end:   Input =================================\n\n//===== begin: Output ==================\nflow.set(\"asOtherData\",asOtherData);\nmsg.payload = [jiDATACYCLETIMES,asOtherData];\nreturn msg;\n//===== end:   Output ==================","outputs":1,"noerr":0,"x":951,"y":138,"wires":[["1ab6a038.6d9bb","d75c355d.17a0c8"]]},{"id":"b3cab3e.a80aa5","type":"comment","z":"383e4cc7.b8b594","name":"Dummy: Datablocks from SPS","info":"","x":731.0000267028809,"y":573.0000038146973,"wires":[]},{"id":"6488a74e.c37ea","type":"function","z":"383e4cc7.b8b594","name":"HEX buffer to ASCII String","func":"//=============================== begin: Header ================================\n// Author: Jürgen Buchner\n// E-Mail: Juergen.Buchner@tgw-group.com\n// Created: 29.01.2018\n// Function description: HEX buffer to ASCII String conversion\n//=============================== end:   Header ================================\n\n//=============================== begin: Input =================================\n//===== begin: Message Data ==========\nbBytes = msg.payload;\n//===== end:   Message Data ==========\n//=============================== end:   Input =================================\n\n//=============================== begin: Function ==============================\nvar sResult = \"\";\n for (var i = 0; i < bBytes.length; i++) {\n    if (parseInt(bBytes[i]) == 10){\n        sResult += \"<br>\";\n    }else{\n        sResult += String.fromCharCode(parseInt(bBytes[i]));\n    }\n}\n//=============================== end:   Function ==============================\n\n//===== begin: Output ================\nmsg.payload = sResult;\nreturn msg;\n//===== end:   Output ================","outputs":1,"noerr":0,"x":962,"y":503,"wires":[["f894d034.b0ee"]]},{"id":"f894d034.b0ee","type":"function","z":"383e4cc7.b8b594","name":"Split and send messages","func":"//=============================== begin: Header ================================\n// Author: Jürgen Buchner\n// E-Mail: Juergen.Buchner@tgw-group.com\n// Created: 29.01.2018\n// Function description: This function splits MFR telegrams from one String of \n// multiple telegrams. One message for each telegram is sent.\n//=============================== end:   Header ================================\n\n//=============================== begin: Input =================================\n//===== begin: Message Data ============\nvar sInput = msg.payload;\nvar sTopic = msg.topic;\nmsg = {};\nvar asMessages = sInput.split(\"<br>\");\n//===== end:   Message Data ============\n//=============================== end:   Input =================================\n\n//=============================== begin: Function ==============================\nfor(i = 0; i < asMessages.length; i++){\n    if (asMessages[i] !== \"\"){\n        //===== begin: Output ==================\n        node.send({payload:asMessages[i],topic:sTopic});\n        //===== end:   Output ==================\n    }\n}\n//=============================== end:   Function ==============================\n","outputs":1,"noerr":0,"x":1233,"y":503,"wires":[["e4721e5d.c10e6"]]},{"id":"fe60e36f.93dcd8","type":"function","z":"383e4cc7.b8b594","name":"Time synchronization","func":"//=============================== begin: Header ================================\n// Author: Jürgen Buchner\n// E-Mail: Juergen.Buchner@tgw-group.com\n// Created: 21.03.2018\n// Function description: This function is responsible for the time \n// synchronization. It decides which time is used based on availability, \n// reliability, and trustworthyness. The priorities are: NTP > SPS > local time\n// Info: The clock of the Mica has an approximate drift of 3,8µs per Minute\n// compared to the NTP time.\n\n// Change Date: 28.03.2018\n// Changed by: Jürgen buchner\n// Change:  add var bInit = global.get(\"bInitTimeSync\");\n//          add global.set(\"bInitTimeSync\",false);\n//          This change allows to use the SPS synchronization when the blackbox\n//          is bootet because the SPS time should be trustworthy when the \n//          blackbox is implemented\n//=============================== end:   Header ================================\n\n//=============================== begin: Initialization ========================\nconst maxDeviation = 2000;//500;\n//=============================== end:   Initialization ========================\n\n//=============================== begin: Input =================================\n//===== begin: Parameters ==============\nconst NTPServerIP = global.get(\"NTPServerIP\");\nconst NTPisDisabled = flow.get(\"NTPisDisabled\");\n//===== end:   Parameters ==============\n\n//===== begin: Global Variables ========\nvar sTimeSyncStatus = global.get(\"sTimeSyncStatus\");\nvar sTimeSyncStatusOld = global.get(\"sTimeSyncStatusOld\");\nvar bInit = global.get(\"bInitTimeSync\");\n//===== end:   Global Variables ========\n\n//===== begin: Message Data ============\nvar oResponseTime = msg.payload; // bool or number (false or response time)\nvar sTopic = msg.topic;\n//===== end:   Message Data ============\n\n//=============================== end:   Input =================================\n\n//=============================== begin: Function ==============================\nvar oDateLocal = new Date(); // local or NTP synced time\n\nif(NTPServerIP == sTopic || \"10.14.5.118\" == sTopic){ // NTP Message\n    if(!oResponseTime || NTPisDisabled){ // NTP not available\n        if(sTimeSyncStatus != \"local\"){ // only change if not local\n            global.set(\"sTimeSyncStatusOld\",sTimeSyncStatus);\n            global.set(\"sTimeSyncStatus\",\"SPS\");\n        }\n    }\n    else{\n        global.set(\"sTimeSyncStatusOld\",sTimeSyncStatus);\n        global.set(\"sTimeSyncStatus\",\"NTP\");\n        \n        flow.set(\"LastSync\",oDateLocal.getTime());\n        context.LastLocalSync = oDateLocal.getTime();\n    }\n}\nelse{ // SPS Message\n    \n    if(sTimeSyncStatus != \"NTP\"){\n        var sNewStatus;\n        var iUTCTime = msg.timestamp;\n        var iTimeLeapLocal = oDateLocal.getTime() - context.LastLocalSync;\n        var iPrediction = iTimeLeapLocal + flow.get(\"LastSync\");\n        \n        if(bInit || Math.abs(iPrediction - iUTCTime) < maxDeviation){ // offset to prediction < 500ms\n            global.set(\"sTimeSyncStatusOld\",sTimeSyncStatus);\n            global.set(\"sTimeSyncStatus\",\"SPS\");\n            flow.set(\"LastSync\",iUTCTime);\n        }\n        else{\n            global.set(\"sTimeSyncStatusOld\",sTimeSyncStatus);\n            global.set(\"sTimeSyncStatus\",\"local\");\n            flow.set(\"LastSync\",oDateLocal.getTime());\n        }\n        context.LastLocalSync = oDateLocal.getTime();\n    }\n    else {\n        if(sTimeSyncStatusOld != \"NTP\"){\n            global.set(\"sTimeSyncStatusOld\",sTimeSyncStatus);\n        }\n        flow.set(\"LastSync\",oDateLocal.getTime());\n        context.LastLocalSync = oDateLocal.getTime();\n    }\n    global.set(\"bInitTimeSync\",false);\n}\n\nsTimeSyncStatus = global.get(\"sTimeSyncStatus\");\nsTimeSyncStatusOld = global.get(\"sTimeSyncStatusOld\");\nif(sTimeSyncStatusOld != sTimeSyncStatus){\n    var color = \"grey\";\n    if(sTimeSyncStatus == \"NTP\"){\n        color = \"green\";\n    }\n    else if(sTimeSyncStatus == \"SPS\"){\n        color = \"yellow\";\n    }\n    else {\n        color = \"red\";\n    }\n//===== begin: Output ==================\n    node.status({fill:color,shape:\"dot\",text: \"Status: \" + sTimeSyncStatus + \" sync.\"});\n    node.send({payload: oDateLocal.getTime() +';' + sTimeSyncStatus + '\\n',topic:\"LogTimeSync\"});\n//===== end:   Output ==================\n}\n//=============================== end:   Function ==============================\n\n/////////////////////////////////////// TEST ///////////////////////////////////\ndate = new Date();\nmsg.payload = date.getTime()-flow.get(\"tic\"); // toc - tic = timespan\n//return msg;\n/////////////////////////////////////// TEST ///////////////////////////////////","outputs":1,"noerr":0,"x":1492.0000915527344,"y":749.0000696182251,"wires":[["cbc1a8fe.3b208"]]},{"id":"e70c4d13.304368","type":"comment","z":"383e4cc7.b8b594","name":"Template - Coding Structure","info":"//=============================== begin: Header ================================\n// Author: - - - Name Surname - -\n// E-Mail: - - - EMAIL - - -\n// Created: - - - Date - - -\n// Function description: - - - - - - - - - - Description - - - - - - - - - - - - \n// - - - - - - - - - - - - - - - - - - - - - Description - - - - - - - - - - - -\n// - - - - - - - - - - - - - - - - - - - - - Description - - - - - - - - - - - -\n\n// Last Change: - - - Date - - -\n// Changed By: - - - Name Surname - - -\n// Change: - - - - - - - - - - - - - - -\n//=============================== end:   Header ================================\n\n//=============================== begin: Initialization ========================\n//=============================== end:   Initialization ========================\n\n//=============================== begin: Input =================================\n//===== begin: Parameters ==============\n//===== end:   Parameters ==============\n\n//===== begin: Global Variables ========\n//===== end:   Global Variables ========\n\n//===== begin: Context Variables =======\n//===== end:   Context Variables =======\n\n//===== begin: Message Data ============\n//===== end:   Message Data ============\n//=============================== end:   Input =================================\n\n//=============================== begin: Function ==============================\n//=============================== end:   Function ==============================\n\n//===== begin: Output ==================\n//===== end:   Output ==================\n\n\n\n\n\n\n\nVariable Naming: Datatype + Name\n    Datatypes:\n        b … bool\n        i … int32\n        l … int64/long\n        f… float/real\n        s… string\n        c… char\n        o… object\n        aX… array (e.g. ai = array of integers)\n        jX… json „array“-> json object with key,object pairs\n        x… includes different datatypes (e.g. jx json „array“)\n    \n    Names: Are chosen depending on the usecase\n    \n    Examples: bTimeout, iXActPos, fDMS","x":971.0001258850098,"y":168.0000171661377,"wires":[]},{"id":"a08c4b9e.023b68","type":"inject","z":"383e4cc7.b8b594","name":"Trigger at Initialization","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":true,"x":724,"y":121.87152290344238,"wires":[["d1c569fe.4eb1e","dc53516c.a3c928","a23ed65e.b092c"]]},{"id":"32ee96ef.3dfcfa","type":"function","z":"383e4cc7.b8b594","name":"Choose next buffer","func":"//=============================== begin: Header ================================\n// Author: Jürgen Buchner\n// E-Mail: Juergen.Buchner@tgw-group.com\n// Created: 01.03.2018\n// Function description: Data of n data classes are stored every m seconds.\n// In order to divide the timespan m into equal parts, where data is stored, \n// a data class buffer is stored every m/n seconds. This function decides which \n// data is chosen using an ongoing index.\n\n// Last Change: 05.03.2018\n// Changed By: Jürgen Buchner\n// Change: sTopic0 is now sent, not sTopic1. This includes the data type such as\n// [mm]\n//=============================== end:   Header ================================\n\n//=============================== begin: Initialization ========================\nif(context.get(\"iIndexer\") === undefined){\n    context.set(\"iIndexer\",1);\n    iIndexer = 1;\n    //node.status({fill:\"red\",shape:\"dot\",text:\"hallo\"});\n}\nvar iCounter = 1;\n//=============================== end:   Initialization ========================\n\n//=============================== begin: Input =================================\n//===== begin: Parameters ==============\nconst asDATACLASSES = flow.get(\"asDATACLASSES\");\n//var jiDATASTORAGEDAYS = flow.get(\"jiDATASTORAGEDAYS\");\nvar iNUMCLASSES = asDATACLASSES.length;\nvar iCYCLETIME = flow.get(\"iCYCLETIMESAVE\")*60; // iCYCLETIMESAVE in minutes -> to seconds\nvar iMINCYCLETIME = iCYCLETIME/iNUMCLASSES; // in seconds\n//===== end:   Parameters ==============\n\n//===== begin: Context Variables =======\nif(context.get(\"iIndexer\") !== undefined){\n    iIndexer = context.get(\"iIndexer\");\n}\n//===== end:   Context Variables =======\n//=============================== end:   Input =================================\n\n//=============================== begin: Function ==============================\nfor(var index in asDATACLASSES){\n    \n    if(iCounter === iIndexer){\n        // Indexer decides which data class is stored next\n        date = new Date();\n        if(iIndexer < iNUMCLASSES){\n            context.set(\"iIndexer\",iIndexer + 1);\n        }\n        else {\n            context.set(\"iIndexer\",1);\n        }\n//===== begin: Output ==================\n        node.status({fill:\"green\",shape:\"dot\",text: \"Chose: \" + asDATACLASSES[index] + \"\\t Time: \" + date.toUTCString()});\n        msg.payload = \"\";\n        msg.topic = asDATACLASSES[index]; // desired data class\n        return msg;\n//===== end:   Output ==================\n    }\n    iCounter = iCounter + 1;\n}\n//=============================== end:   Function ==============================\n","outputs":1,"noerr":0,"x":2547,"y":573.0000305175781,"wires":[["63fdea7a.fbdf34"]]},{"id":"63fdea7a.fbdf34","type":"function","z":"383e4cc7.b8b594","name":"Load and delete desired buffer","func":"//=============================== begin: Header ================================\n// Author: Jürgen Buchner\n// E-Mail: Juergen.Buchner@tgw-group.com\n// Created: 01.03.2018\n// Function description: This function loads the desired data buffer and sends\n// it to the next node to store on the SD card. This function also clears the \n// buffer from the main memory.\n\n// Change: 05.03.2018\n// Changed By: Jürgen Buchner\n// Change: Daily trigger handling\n//=============================== end:   Header ================================\n\n//=============================== begin: Input =================================\n//===== begin: Message Data ============\nsTopic0 = msg.topic;\n//===== end:   Message Data ============\n\n//===== begin: Global Variables ========\ntopicSplit = sTopic0.split('['); // [ and ] not allowed in JSON string -> data.DMS[mm]-> ERROR\nvar sTopic1 = topicSplit[0]; // Delete the unit of the variable name (e.g. \"DMS[mm]\"-> \"DMS\")\nmsg.payload = flow.get(sTopic1 + \"Buffer\");\nlatestData = flow.get(sTopic1 + \"Latest\");\n//===== end:   Global Variables ========\n//=============================== end:   Input =================================\n\n//=============================== begin: Function ==============================\n// In case of a daily trigger and the buffer is empty, then the latest value is\n// chosen\nif(msg.daily && msg.payload === \"\"){\n    //node.status({fill:\"yellow\",shape:\"dot\",text: \" Buffer was empty\"}); //TEST\n    msg.payload = latestData;\n}\n//===== begin: Output ==================\nflow.set(sTopic1 + \"Buffer\",\"\");\nreturn msg;\n//===== end:   Output ==================\n//=============================== end:   Function ==============================","outputs":1,"noerr":0,"x":3036,"y":573.0000305175781,"wires":[["cbc1a8fe.3b208"]]},{"id":"f8a47cc2.86ff08","type":"function","z":"383e4cc7.b8b594","name":"Trigger, when receiving a critical error","func":"//=============================== begin: Header ================================\n// Author: Jürgen Buchner\n// E-Mail: Juergen.Buchner@tgw-group.com\n// Created: 01.03.2018\n// Function description: Whenever a critical error is received, all data buffers\n// are stored to the SD card. Critical errors are defined in \"General Parameters\"\n//=============================== end:   Header ================================\n\n//=============================== begin: Initialization ========================\nvar date = new Date();\nvar currentTime = date.getTime();\n\nif(context.get(\"dateLastSave\") === undefined){\n    context.set(\"dateLastSave\",currentTime);\n}\n//=============================== end:   Initialization ========================\n\n//=============================== begin: Input =================================\n//===== begin: Parameters ==============\nvar asCRITICALERRORS = flow.get(\"asCRITICALERRORS\");\n//===== end:   Parameters ==============\n\n//===== begin: Context Variables =======\ndateLastSave = context.get(\"dateLastSave\");\n//===== end:   Context Variables =======\n\n//===== begin: Message Data ============\njxData = msg.payload;\n//===== end:   Message Data ============\n//=============================== end:   Input =================================\n\n//=============================== begin: Function ==============================\nfor (var i = 0; i < asCRITICALERRORS.length; i++){\n    if(jxData[asCRITICALERRORS[i]] !== undefined && \n    jxData[asCRITICALERRORS[i]] !==0 && \n    (currentTime - dateLastSave > 10*1000 || currentTime === dateLastSave)){\n        // Last trigger was > 60 seconds before current time\n        // if currentTime === dateLastSave then this was the first error\n        context.set(\"dateLastSave\",currentTime);\n//===== begin: Output ==================\n        msg.daily = false; // Flag if \"Cyclic Trigger – Daily\" triggered\n        msg.payload = asCRITICALERRORS[i]; // trigger to save all data to SD card\n        return msg;\n//===== end:   Output ==================\n    }\n}\n//=============================== end:   Function ==============================\n","outputs":1,"noerr":0,"x":2245,"y":645.0000305175781,"wires":[["b1c55f5b.c279f"]]},{"id":"57c8d06f.c66dd8","type":"function","z":"383e4cc7.b8b594","name":"Trigger all  cT/nD sec","func":"//=============================== begin: Header ================================\n// Author: Jürgen Buchner\n// E-Mail: Juergen.Buchner@tgw-group.com\n// Created: 01.03.2018\n// Function description: Data of n data classes are stored every m seconds.\n// In order to divide the timespan m into equal parts, where data is stored, \n// a data class buffer is stored every m/n seconds. This function decides which \n// data is chosen using an ongoing index. This function triggers all m/n resp.\n// cycleTime/numClasses seconds.\n\n// Last Change: 05.03.2018\n// Changed By: Jürgen Buchner\n// Change: Embedding code in Coding Structure\n\n// Last Change: 07.03.2018\n// Changed By: Jürgen Buchner\n// Change:  del jiDATASTORAGEDAYS\n//          add DATACLASSES\n//=============================== end:   Header ================================\n\n//=============================== begin: Initialization ========================\nvar date = new Date();\nvar currentTime = date.getTime();\n\nif(context.get(\"dateLastSave\") === undefined){\n    context.set(\"dateLastSave\",currentTime);\n}\n//=============================== end:   Initialization ========================\n\n//=============================== begin: Input =================================\n//===== begin: Parameters ==============\nconst asDATACLASSES = flow.get(\"asDATACLASSES\");\nvar iNUMCLASSES = asDATACLASSES.length;\nvar iCYCLETIME = flow.get(\"iCYCLETIMESAVE\")*60; // iCYCLETIMESAVE in minutes -> to seconds\nvar iMINCYCLETIME = iCYCLETIME/iNUMCLASSES; // in seconds\n\nvar date = new Date();\nvar currentTime = date.getTime();\n//===== end:   Parameters ==============\n\n//===== begin: Context Variables =======\ndateLastSave = context.get(\"dateLastSave\");\n//===== end:   Context Variables =======\n//=============================== end:   Input =================================\n\n//=============================== begin: Function ==============================\nif(currentTime - dateLastSave > iMINCYCLETIME*1000){\n    context.set(\"dateLastSave\",currentTime);\n//===== begin: Output ==================\n    msg.daily = false; // Flag if \"Cyclic Trigger – Daily\" triggered\n    return msg;\n//===== end:   Output ==================\n}\n//=============================== end:   Function ==============================","outputs":1,"noerr":0,"x":2295,"y":573,"wires":[["32ee96ef.3dfcfa"]]},{"id":"bdd5fbe5.64f46","type":"inject","z":"383e4cc7.b8b594","name":"every sec","topic":"","payload":"","payloadType":"date","repeat":"1","crontab":"","once":true,"x":2102,"y":573,"wires":[["57c8d06f.c66dd8"]]},{"id":"b1c55f5b.c279f","type":"function","z":"383e4cc7.b8b594","name":"Choose all buffers","func":"//=============================== begin: Header ================================\n// Author: Jürgen Buchner\n// E-Mail: Juergen.Buchner@tgw-group.com\n// Created: 05.03.2018\n// Function description: This function requests all data to be stored.\n// Change:  del jiDATASTORAGEDAYS\n//          add asDATACLASSES\n//=============================== end:   Header ================================\n\n//=============================== begin: Initialization ========================\nvar iCounter = 1;\n//=============================== end:   Initialization ========================\n\n//=============================== begin: Input =================================\n//===== begin: Parameters ==============\nconst asDATACLASSES = flow.get(\"asDATACLASSES\");\n//===== end:   Parameters ==============\n//=============================== end:   Input =================================\n\n//=============================== begin: Function ==============================\nfor(var index in asDATACLASSES){\n//===== begin: Output ==================\n    node.send({payload:\"\",topic: asDATACLASSES[index],daily: msg.daily});\n//===== end:   Output ==================\n}\n//===== begin: Output ==================\ndate = new Date();\nnode.status({fill:\"green\",shape:\"dot\",text: \"Chose: all\" + \"\\t Time: \" + date.toUTCString()});\n//===== end:   Output ==================\n//=============================== end:   Function ==============================\n","outputs":1,"noerr":0,"x":2547.3869400024414,"y":645.16015625,"wires":[["63fdea7a.fbdf34"]]},{"id":"1d10493b.b130b7","type":"file","z":"383e4cc7.b8b594","name":"","filename":"","appendNewline":false,"createDir":true,"overwriteFile":"false","x":3478.51953125,"y":573.00390625,"wires":[[]]},{"id":"75f1d2a5.9f221c","type":"subflow:1e9e5e8e.a754d1","z":"383e4cc7.b8b594","name":"","x":1727,"y":527,"wires":[]},{"id":"bd0cb430.946c38","type":"fs-ops-dir","z":"383e4cc7.b8b594","name":"Get file names","path":"\"sFILEPATH\"","pathType":"global","filter":"*","filterType":"str","dir":"options","dirType":"msg","x":856.0000267028809,"y":928.0000038146973,"wires":[["3e2f5a17.793cf6"]]},{"id":"f270e9a9.f4b098","type":"inject","z":"383e4cc7.b8b594","name":"","topic":"","payload":"inject","payloadType":"str","repeat":"60","crontab":"","once":true,"x":686.0000267028809,"y":928.0000038146973,"wires":[["bd0cb430.946c38"]]},{"id":"3e2f5a17.793cf6","type":"function","z":"383e4cc7.b8b594","name":"Set filenamelist","func":"//=============================== begin: Header ================================\n// Author: Jürgen Buchner\n// E-Mail: Juergen.Buchner@tgw-group.com\n// Created: 07.03.2018\n// Function description: This function saves the current file names in \n// filenamelist\n\n// Change Date: 08.03.2018\n// Changed By: Jürgen Buchner\n// Change: add .csv filter\n//=============================== end:   Header ================================\n\n//=============================== begin: Initialization ========================\nvar array = [];\n//=============================== end:   Initialization ========================\n\n//=============================== begin: Input =================================\n//===== begin: Message Data ============\noptions = msg.options;\n//===== end:   Message Data ============\n//=============================== end:   Input =================================\n\n//=============================== begin: Function ==============================\n// Filter for .csv files\nfor(var index in options){\n    if(options[index].includes('.csv')){\n        array.push(options[index]);\n    }\n}\n//===== begin: Output ==================\nglobal.set('filenamelist',array);\n//===== end:   Output ==================\n//=============================== end:   Function ==============================\nnode.send({payload:[options,array]});","outputs":1,"noerr":0,"x":1076.0000267028809,"y":928.0000038146973,"wires":[[]]},{"id":"7e229136.b92968","type":"comment","z":"383e4cc7.b8b594","name":"Update File List (only .csv)","info":"","x":691.0000267028809,"y":887.3333368301392,"wires":[]},{"id":"2ac87fa3.8d758","type":"comment","z":"383e4cc7.b8b594","name":"Error Handling/Prevention","info":"","x":691.0000267028809,"y":1033.0039100646973,"wires":[]},{"id":"ca0d1b60.1d1fe","type":"function","z":"383e4cc7.b8b594","name":"SPS to Unix time","func":"//=============================== begin: Header ================================\n// Author: Jürgen Buchner\n// E-Mail: Juergen.Buchner@tgw-group.com\n// Created: 08.03.2018\n// Function description: this function converts the SPS time to the unix time.\n//  SPS time:   - UTC, \n//              - 8 Bytes: Year, Month, Day, Hour, Minute, Second (each is a byte)\n//                          Milliseconds is two bytes\n// Unix time: milliseconds from 1.1.1970\n\n// Change Date: 21.03.2018\n// Changed by: Jürgen Buchner\n// Change: add msg.SPSTime = date.getTime();\n// Change Date: 22.03.2018\n// Changed by: Jürgen Buchner\n// Change: mod minute2mSec.toString(16) -> ('00000000'+(minute2mSec).toString(16)).substr(-8)\n// Leading zeros are added to always have 8 digits\n//=============================== end:   Header ================================\n\n/////////////////////////////////////// TEST ///////////////////////////////////\ndate = new Date();\nflow.set(\"tic\",date.getTime());\n/////////////////////////////////////// TEST ///////////////////////////////////\n\n//=============================== begin: Input =================================\n//===== begin: Parameters ==============\nconst SPSTIMEYEAR2HOUR = global.get(\"SPSUTCTimeYear2Hour\");\nconst SPSTIMEMIN2MSEC = global.get(\"SPSUTCTimeMinute2mSec\");\n//===== end:   Parameters ==============\n\nvar year2hour = msg.payload[SPSTIMEYEAR2HOUR];\nvar minute2mSec = msg.payload[SPSTIMEMIN2MSEC];\n//=============================== end:   Input =================================\n\n//=============================== begin: Function ==============================\nvar sHEXyear2hour = ('00000000'+(year2hour).toString(16)).substr(-8);\nvar sHEXminute2mSec = ('00000000'+(minute2mSec).toString(16)).substr(-8);\nvar year = \"20\" + sHEXyear2hour.substring(0,2);\nvar month = sHEXyear2hour.substring(2,4);\nvar day = sHEXyear2hour.substring(4,6);\nvar hour = sHEXyear2hour.substring(6,8);\n\nvar minute = sHEXminute2mSec.substring(0,2);\nvar second = sHEXminute2mSec.substring(2,4);\nvar millisecond = sHEXminute2mSec.substring(4,7);\n\ndate = new Date(parseInt(year),parseInt(month)-1,parseInt(day),parseInt(hour),parseInt(minute),parseInt(second),parseInt(millisecond));\nmsg.timestamp = date.getTime();\nmsg.SPSTime = date.getTime();\n//===== begin: Output ==================\nreturn msg;\n//===== end:   Output ==================\n//=============================== end:   Function ==============================","outputs":1,"noerr":0,"x":1150,"y":648,"wires":[["f8a47cc2.86ff08","fe60e36f.93dcd8","e4721e5d.c10e6"]]},{"id":"735e87df.cf206","type":"tcp in","z":"383e4cc7.b8b594","name":"Data from SPS (TCP)","server":"client","host":"192.168.150.3","port":"2101","datamode":"stream","datatype":"buffer","newline":"","topic":"MFR-Log","base64":false,"x":700,"y":503,"wires":[["6488a74e.c37ea"]]},{"id":"5882b83d.f5c4c","type":"subflow:f8b2053b.e2c1b","z":"383e4cc7.b8b594","name":"","x":1016.0000267028809,"y":1328.0000038146973,"wires":[["93c3dd11.34913"]]},{"id":"93c3dd11.34913","type":"function","z":"383e4cc7.b8b594","name":"Ringbuffer Check","func":"//=============================== begin: Header ================================\n// Author: Jürgen Buchner\n// E-Mail: Juergen.Buchner@tgw-group.com\n// Created: 19.03.2018\n// Function description: If a file is stored longer than the desired time \n// (defined in storage parameter list: jiDATASTORAGEDAYS), than the file is\n// deleted. To delete it this function sends the file name to the file delete \n// node.\n// File name syntax: \"YYYY-MM-DD--DATACLASS.csv\"\n//=============================== end:   Header ================================\n\n//=============================== begin: Initialization ========================\nvar sFilename = \"\";\nvar sDataClassName = \"\";\n//=============================== end:   Initialization ========================\n\n//=============================== begin: Input =================================\n//===== begin: Parameters ==============\nconst jiDATASTORAGEDAYS = flow.get(\"jiDATASTORAGEDAYS\"); \n//===== end:   Parameters ==============\n\n//===== begin: Message Data ============\nvar asList = msg.options;\n//===== end:   Message Data ============\n//=============================== end:   Input =================================\n\n//=============================== begin: Function ==============================\nfor ( var i in asList){\n    sFilename = asList[i];\n    sDataClassName = sFilename.substring(12,sFilename.length - 4);\n    if(jiDATASTORAGEDAYS[sDataClassName] !== undefined){\n        var iYear = Number(sFilename.substring(0,4));\n        var iMonth = Number(sFilename.substring(5,7));\n        var iDay = Number(sFilename.substring(8,10));\n        var oFileDate = new Date(iYear,iMonth - 1,iDay, 0, 0, 0, 0); // Month is zero indexed\n        var iFileTimeStamp = oFileDate.getTime();\n        var iCurrenTimeStamp = flow.get(\"LastSync\");\n        var iTimeDifferenzDAYS = (iCurrenTimeStamp - iFileTimeStamp)/1000/60/60/24; // Time differenz of current time and file date in days\n        if(iTimeDifferenzDAYS > jiDATASTORAGEDAYS[sDataClassName]){\n//===== begin: Output ==================\n            node.send({payload:sFilename});\n//===== end:   Output ==================\n        }\n    }\n    else{\n        // Brute force here: Deleting all files which do not fit the definition \n        // \"YYYY-MM-DD--DATACLASS.csv\" or are not defined as dataclass\n        \n        //node.send({payload:sFilename});\n    }\n}\n//=============================== end:   Function ==============================","outputs":1,"noerr":0,"x":1306.0000267028809,"y":1328.0000038146973,"wires":[["419a63a0.003b8c"]]},{"id":"1b6d3e3b.37e83a","type":"inject","z":"383e4cc7.b8b594","name":"Every 24 hours","topic":"","payload":"","payloadType":"date","repeat":"86400","crontab":"","once":false,"x":716.0000267028809,"y":1328.0000038146973,"wires":[["5882b83d.f5c4c"]]},{"id":"419a63a0.003b8c","type":"fs-ops-delete","z":"383e4cc7.b8b594","name":"","path":"\"sFILEPATH\"","pathType":"global","filename":"payload","filenameType":"msg","x":1686.0000267028809,"y":1328.0000038146973,"wires":[[]]},{"id":"99c634a.afbd4c8","type":"catch","z":"383e4cc7.b8b594","name":"Error Handler: Write on sd card","scope":["f8fff2e1.a9976"],"x":766.0000267028809,"y":1128.0000038146973,"wires":[["972d5b49.0daa58"]]},{"id":"f8fff2e1.a9976","type":"file","z":"383e4cc7.b8b594","name":"CheckSDWrite","filename":"","appendNewline":true,"createDir":false,"overwriteFile":"true","x":1696.0000267028809,"y":1088.0000038146973,"wires":[[]]},{"id":"57d5a8de.f45118","type":"inject","z":"383e4cc7.b8b594","name":"Trigger every 10 min","topic":"CheckSDWrite","payload":"","payloadType":"date","repeat":"600","crontab":"","once":false,"x":736.0000267028809,"y":1088.0000038146973,"wires":[["e3200af0.ccaac8"]]},{"id":"cbc1a8fe.3b208","type":"function","z":"383e4cc7.b8b594","name":"Add filename","func":"//=============================== begin: Header ================================\n// Author: Jürgen Buchner\n// E-Mail: Juergen.Buchner@tgw-group.com\n// Created: 05.03.2018\n// Function description: This function prepares the message for the file \n// in order to save the data on the SD card. The filename is created and added\n// to the message. If the save request is from the daily trigger, the data is\n// stored to the files of the previous day.\n\n// Change Date: 07.03.2018\n// Changed By: Jürgen Buchner\n// Change: sFILEPATH goes from flow to global\n// Change Date: 28.03.2018\n// Changed By: Jürgen Buchner\n// Change:  add var iTimestamp = flow.get(\"LastSync\");\n//          mod date = new Date(); -> date = new Date(iTimestamp);\n//=============================== end:   Header ================================\n\n//=============================== begin: Input =================================\n//===== begin: Parameters ==============\nsFILEPATH = global.get(\"sFILEPATH\");\n//===== end:   Parameters ==============\n\n//===== begin: Global Variables ========\nvar iTimestamp = flow.get(\"LastSync\");\n//===== end:   Global Variables ========\n\n//===== begin: Message Data ============\nsTopic = msg.topic;\n//===== end:   Message Data ============\n//=============================== end:   Input =================================\n\n//=============================== begin: Function ==============================\n// If a daily trigger happens (at 00:00), the current buffer is written to \n// the files of the previous day.\nvar date;\nif(msg.daily === true){\n    date = new Date(global.get(\"previousDayMS\")||0);\n    var dateNew = new Date(iTimestamp);\n    dateNew.setMilliseconds(0);\n    dateNew.setSeconds(0);\n    dateNew.setMinutes(0);\n    dateNew.setHours(0);\n    global.set(\"previousDayMS\",dateNew.getTime());\n    node.status({fill:\"green\",shape:\"dot\",text: \" Daily Save\"});\n}\nelse {\n    date = new Date(iTimestamp);\n    node.status({fill:\"green\",shape:\"ring\",text: \" Cyclic or Critical Save\"});\n}\n\n// Adding a \"0\" to the month if the value is < 10\nvar month = (date.getMonth()+1).toString(); // getMonth is a zero based value\nif(month.length < 2){\n    // if current month < 10 (e.g. September = 9) then add \"0\" to the string => month = \"09\"\n    month = \"0\" + month;\n}\n\n// Adding a \"0\" to the day if the value is < 10\nvar day = date.getDate().toString(); // fetches the day\nif(day.length < 2){\n    // if current day < 10 (e.g. 9) then add \"0\" to the string => day = \"09\"\n    day = \"0\" + day;\n}\nvar sDate = (1900 + date.getYear()).toString() + // date starts from 1900\n\"-\" + month +\n\"-\" + day;\nmsg.filename = sFILEPATH + sDate + \"--\" + sTopic + \".csv\";\n//===== begin: Output ==================\nreturn msg;\n//===== end:   Output ==================\n//=============================== end:   Function ==============================","outputs":1,"noerr":0,"x":3305.0001640319824,"y":573.0000276565552,"wires":[["1d10493b.b130b7"]]},{"id":"e3200af0.ccaac8","type":"function","z":"383e4cc7.b8b594","name":"Add filename: checkWrite","func":"//=============================== begin: Header ================================\n// Author: Jürgen Buchner\n// E-Mail: Juergen.Buchner@tgw-group.com\n// Created: 20.03.2018\n// Function description: This function prepares the message for the file \n// in order to save the data on the SD card. The filename is created and added\n// to the message.\n//=============================== end:   Header ================================\n\n//=============================== begin: Input =================================\n//===== begin: Parameters ==============\nsFILEPATH = global.get(\"sFILEPATH\");\n//===== end:   Parameters ==============\n\n//===== begin: Message Data ============\nsTopic = msg.topic;\n//===== end:   Message Data ============\n//=============================== end:   Input =================================\n\n//=============================== begin: Function ==============================\nmsg.filename = sFILEPATH + sTopic + \".txt\";\nvar date = new Date();\nnode.status({fill:\"green\",shape:\"dot\",text: \" Time: \" + date.toTimeString()});\n//===== begin: Output ==================\nreturn msg;\n//===== end:   Output ==================\n//=============================== end:   Function ==============================","outputs":1,"noerr":0,"x":1326.0000267028809,"y":1088.0000038146973,"wires":[["f8fff2e1.a9976"]]},{"id":"972d5b49.0daa58","type":"function","z":"383e4cc7.b8b594","name":"Set Bit","func":"//=============================== begin: Header ================================\n// Author: Jürgen Buchner\n// E-Mail: Juergen.Buchner@tgw-group.com\n// Created: 20.03.2018\n// Function description: This function sets the payload true and sends a message.\n//=============================== end:   Header ================================\n\n//=============================== begin: Function ==============================\nmsg.topic = \"Memory Fault\";\nmsg.payload = {};\nmsg.payload = true;\n//===== begin: Output ==================\nreturn msg;\n//===== end:   Output ==================\n//=============================== end:   Function ==============================","outputs":1,"noerr":0,"x":1266.0000267028809,"y":1128.0000038146973,"wires":[["26c76182.805ede","bab14600.82ff7","b8c938f6.d8f6b8"]]},{"id":"26c76182.805ede","type":"ui_template","z":"383e4cc7.b8b594","group":"33155e9f.b13d02","name":"Memory Fault","order":5,"width":"3","height":"1","format":"<div layout=\"row\" layout-align=\"space-between center\">\n\n    <p flex>Memory Fault:</p>\n\n    <ng-md-icon icon=\"lens\" ng-style=\"{fill:msg.payload==true?'red':'grey'}\" size=\"32\"></ng-md-icon>\n\n</div>","storeOutMessages":true,"fwdInMessages":true,"templateScope":"local","x":1696.0000896453857,"y":1128.000020980835,"wires":[[]]},{"id":"3508c179.383196","type":"exec","z":"383e4cc7.b8b594","command":"reboot","addpay":false,"append":"","useSpawn":"","timer":"","name":"","x":1670,"y":1240,"wires":[[],[],[]]},{"id":"bab14600.82ff7","type":"delay","z":"383e4cc7.b8b594","name":"","pauseType":"delay","timeout":"5","timeoutUnits":"minutes","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":1520,"y":1240,"wires":[["3508c179.383196"]]},{"id":"3dea5dd8.f80ae2","type":"conf ping","z":"383e4cc7.b8b594","name":"","host":"","timeout":"1","requests":"1","x":1155,"y":749,"wires":[["fe60e36f.93dcd8"]]},{"id":"8202a18c.41a91","type":"function","z":"383e4cc7.b8b594","name":"Send NTP host","func":"\n//=============================== begin: Header ================================\n// Author: Jürgen Buchner\n// E-Mail: Juergen.Buchner@tgw-group.com\n// Created: 20.03.2018\n// Function description: Sets the payload as host\n//=============================== end:   Header ================================\n\n//=============================== begin: Input =================================\n//===== begin: Message Data ============\nmsg.host = msg.payload;\n//===== end:   Message Data ============\n//=============================== end:   Input =================================\n\n//===== begin: Output ==================\nreturn msg;\n//===== end:   Output ==================\n","outputs":1,"noerr":0,"x":945,"y":749,"wires":[["3dea5dd8.f80ae2"]]},{"id":"4efce550.89d13c","type":"inject","z":"383e4cc7.b8b594","name":"","topic":"","payload":"\"NTPServerIP\"","payloadType":"global","repeat":"60","crontab":"","once":true,"x":725,"y":749,"wires":[["8202a18c.41a91"]]},{"id":"881d4f78.cf0d6","type":"ui_chart","z":"383e4cc7.b8b594","name":"","group":"c577412.52b9f4","order":3,"width":0,"height":0,"label":"Cycle Time PLC acquisition","chartType":"line","legend":"false","xformat":"HH:mm:ss","interpolate":"linear","nodata":"","dot":false,"ymin":"0","ymax":"500","removeOlder":"30","removeOlderPoints":"200","removeOlderUnit":"1","cutout":0,"useOneColor":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":2,"x":2080,"y":140,"wires":[[],[]]},{"id":"a23ed65e.b092c","type":"function","z":"383e4cc7.b8b594","name":"Logging Boot Time","func":"//=============================== begin: Header ================================\n// Author: Jürgen Buchner\n// E-Mail: Juergen.Buchner@tgw-group.com\n// Created: 28.03.2018\n// Function description: This function logs when the blackbox is bootet.\n//=============================== end:   Header ================================\n\n//=============================== begin: Function ==============================\nvar oDateLocal = new Date();\nif(flow.get(\"LastSync\") === undefined){\n    var iTimestamp = flow.set(\"LastSync\", oDateLocal.getTime());\n}\n//===== begin: Output ==================\nnode.send({payload: oDateLocal.getTime() + '\\n',topic:\"LogBootTimes\"});\n//===== end:   Output ==================\n//=============================== end:   Function ==============================","outputs":1,"noerr":0,"x":941.0000076293945,"y":246.00000286102295,"wires":[["cbc1a8fe.3b208"]]},{"id":"dc0abe69.e66dc8","type":"inject","z":"383e4cc7.b8b594","name":"every minute","topic":"","payload":"","payloadType":"date","repeat":"60","crontab":"","once":false,"x":2113,"y":718,"wires":[["ecc4b780.741ad8"]]},{"id":"ecc4b780.741ad8","type":"function","z":"383e4cc7.b8b594","name":"Trigger at 00:00","func":"//=============================== begin: Header ================================\n// Author: Jürgen Buchner\n// E-Mail: Juergen.Buchner@tgw-group.com\n// Created: 28.03.2018\n// Function description: Setting the daily flag and sending a message for daily \n// trigger. The message is sent when the lastHour was 23 and the current is 0.\n// As \"lastHour\" is set every time, the trigger happens only once a day.\n//=============================== end:   Header ================================\n\n//=============================== begin: Function ==============================\nvar iTimestamp = flow.get(\"LastSync\");\nvar date = new Date(iTimestamp);\nvar hour = date.getUTCHours();\nif(hour === 0 & context.lastHour === 23){\n//===== begin: Output ==================\n    node.send({payload:\"trigger\",daily: true}); // daily: Flag if \"Cyclic Trigger – Daily\" triggered\n//===== end:   Output ==================\n}\ncontext.lastHour = hour;\n//=============================== end:   Function ==============================","outputs":1,"noerr":0,"x":2313,"y":718,"wires":[["b1c55f5b.c279f"]]},{"id":"a9b11af4.ea3df","type":"inject","z":"383e4cc7.b8b594","name":"Test trigger","topic":"","payload":"Trigger","payloadType":"str","repeat":"","crontab":"","once":false,"x":2093,"y":788,"wires":[["7b6eba55.3048bc"]]},{"id":"7b6eba55.3048bc","type":"function","z":"383e4cc7.b8b594","name":"Add daily flag","func":"msg.daily = false; // Flag if \"Cyclic Trigger – Daily\" triggered\nreturn msg;","outputs":1,"noerr":0,"x":2313,"y":788,"wires":[["b1c55f5b.c279f"]]},{"id":"5d4929f9.23d7c8","type":"inject","z":"383e4cc7.b8b594","name":"6s","topic":"Temperature","payload":"{}","payloadType":"json","repeat":"6","crontab":"","once":false,"x":650,"y":369,"wires":[["fa32f308.2c4638"]]},{"id":"fa32f308.2c4638","type":"exec","z":"383e4cc7.b8b594","command":"cat /sys/devices/platform/ocp/44e0b000.i2c/i2c-0/0-0048/hwmon/hwmon0/temp1_input","addpay":false,"append":"","useSpawn":true,"timer":"","name":"Get CPU Temperature","x":940,"y":369,"wires":[["915db2b3.2a0038"],[],[]]},{"id":"915db2b3.2a0038","type":"function","z":"383e4cc7.b8b594","name":"Parse Float & Add topic","func":"//=============================== begin: Header ================================\n// Author: Jürgen Buchner\n// E-Mail: \n// Created: 05.04.2018\n// Function description: Parses the input to Float\n//=============================== end:   Header ================================\n\n//=============================== begin: Function ==============================\nmsg.payload = parseFloat(msg.payload);\nmsg.topic = \"BB.CPU.Temp\";\n//=============================== end:   Function ==============================\n\n//===== begin: Output ==================\nreturn msg;\n//===== end:   Output ==================","outputs":1,"noerr":0,"x":1230,"y":369,"wires":[["13b99a9e.8fdf65","e4721e5d.c10e6"]]},{"id":"13b99a9e.8fdf65","type":"ui_chart","z":"383e4cc7.b8b594","name":"","group":"c577412.52b9f4","order":4,"width":"8","height":"6","label":"CPU Temperature","chartType":"line","legend":"false","xformat":"HH:mm:ss","interpolate":"linear","nodata":"","dot":false,"ymin":"0","ymax":"","removeOlder":1,"removeOlderPoints":"200","removeOlderUnit":"3600","cutout":0,"useOneColor":false,"colors":["#24b121","#de1d1d","#1100dd","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":2,"x":2049.0000953674316,"y":108.99999904632568,"wires":[[],[]]},{"id":"b979080a.2deab8","type":"function","z":"383e4cc7.b8b594","name":"Save data to local buffer, if changed","func":"//=============================== begin: Header ================================\n// Author: Jürgen Buchner\n// E-Mail: Juergen.Buchner@tgw-group.com\n// Created: 29.01.2018\n// Function description: This function saves the incoming data to a local \n// buffer. This buffer allows to store data for a certain amount of time until\n// saving the buffer to the SD card is triggered.\n\n// Last Change: 01.03.2018\n// Changed By: Jürgen Buchner\n// Change: xPayload -> jXPayload\n\n// Last Change: 05.03.2018\n// Changed By: Jürgen Buchner\n// Change:  iTimeStamp -> lTimeStamp\n//          Adding the timestamp to the latest data, splitting sLatestData for \n//          the comparison if the data changed.\n// Last Change: 07.03.2018\n// Changed By: Jürgen Buchner\n// Change:  Debugging MFR: flow.set(... ,sBuffer + ...)\n//          add '\\n' to Latest\n// Last Change: 08.03.2018\n// Changed By: Jürgen Buchner\n// Change:  Parameters: var -> const\n//          add asDATACLASSES\n//          use asDATACLASSES in loop to store (only storing desired data),\n//              exclude MFR-Log to store\n// Last Change: 12.03.2018\n// Changed By: Jürgen Buchner\n// Change:  add sLatestData.substring to delete the carriage return\n// Change Date: 29.03.2018\n// Changed by: Jürgen Buchner\n// Change:  del flow.set(sTopic + \"Latest\", lTimeStamp.toString() + ';' + jXPayload.toString() + '\\n');\n//          It was added at Global Variables\n// Change Date: 05.04.2018\n// Changed By: Jürgen Buchner\n// Change:  add else if (sTopic === \"BB.CPUTemp\") ...\n//          add if(sTopic0 !== \"MFR-Log\" && sTopic0 !== \"BB.CPUTemp\"){\n// Change Date: 09.04.2018\n// Changed By: Jürgen Buchner\n// Change:  mod Change Structure of if clause: SPS Data now  also has a topic \n// and this topic is checked. Every other data, such as CPU temperature, is \n// handled equally\n// Change Date: 10.04.2018\n// Changed By: Jürgen Buchner\n// Change:  add bDiff functionality\n// Change Date: 19.04.2018\n// Changed By: Jürgen Buchner\n// Change:  mod sTopic === \"TCP\" -> sTopic === \"MFR-Log\"\n//          del if(topic !== MFR-Log && topic !== BB.CPU.Temp ...\n//          add if(asOtherData.includes(sTopic0) === false){\n//=============================== end:   Header ================================\n\n//=============================== begin: Input =================================\n//===== begin: Parameters ==============\nconst iDATACYCLES = flow.get(\"iDATACYCLES\");\nconst asDATACLASSES = flow.get(\"asDATACLASSES\");\nconst iDataCyclesCnt = flow.get(\"iDataCyclesCnt\");\nconst bDiff = flow.get(\"bDiff\");\nvar asOtherData = flow.get(\"asOtherData\");\n//===== end:   Parameters ==============\n\n//===== begin: Message Data ============\nvar sTopic = msg.topic;\nvar lTimeStamp = msg.timestamp;\nvar jXPayload = msg.payload;\n//===== end:   Message Data ============\n\n//=============================== end:   Input =================================\n\n//=============================== begin: Function ==============================\nif(sTopic === \"MFR-Log\"){\n//===== begin: Output ==================\n    var sBuffer = flow.get(sTopic + \"Buffer\")||\"\";\n    flow.set(sTopic + \"Buffer\", sBuffer + lTimeStamp.toString() + ';' + \n                                                jXPayload.toString() + '\\n');\n//===== end:   Output ==================\n} else if(sTopic == \"SPSDataRFC1006\"){\n    for (var index in asDATACLASSES) { // storing desired data\n        var sTopic0 = asDATACLASSES[index];\n        if(asOtherData.includes(sTopic0) === false){\n            topicSplit = sTopic0.split('['); // [ and ] not allowed in JSON string -> data.DMS[mm]-> ERROR\n            var sTopic1 = topicSplit[0]; // Delete the unit of the variable name (e.g. \"DMS[mm]\"-> \"DMS\")\n            var sLatestData = flow.get(sTopic1 + \"Latest\")||\";\";\n            var sLatestDataSplit = sLatestData.split(';'); // Splitting to Timestamp & Data\n            sLatestData = sLatestDataSplit[1]; // Fetching the data\n            sLatestData = sLatestData.substring(0,sLatestData.length - 1); // deleting the carriage return\n            \n            // Depending on the cycle time, a certain amount of cycles (based on \n            // the minor cycle) need to be done -> See \"Calculation - iDATACYCLES\"\n            if(iDataCyclesCnt[sTopic0] === iDATACYCLES[sTopic0]){\n                // Only save if data changed\n                if (bDiff === false || sLatestData !== jXPayload[sTopic0].toString()){\n//===== begin: Output ==================\n                    //node.send({payload:[sLatestData,jXPayload[sTopic0].toString()]});\n                    flow.set(sTopic1 + \"Latest\", lTimeStamp.toString() + ';' + jXPayload[sTopic0].toString()+ '\\n');\n                    var sBuffer = flow.get(sTopic1 + \"Buffer\")||\"\";\n                    flow.set(sTopic1 + \"Buffer\", sBuffer + lTimeStamp.toString() + ';' + \n                                                    jXPayload[sTopic0].toString() + '\\n');\n//===== end:   Output ==================\n                }\n                iDataCyclesCnt[sTopic0] = 1; // reset cycle count\n            }\n            else {\n                iDataCyclesCnt[sTopic0] = iDataCyclesCnt[sTopic0] +1;\n            }\n        }\n    }\n//===== begin: Output ==================\n    flow.set(\"iDataCyclesCnt\",iDataCyclesCnt);\n//===== end:   Output ==================\n/////////////////////////////////////// TEST ///////////////////////////////////\ndate = new Date();\n//msg.payload = date.getTime()-flow.get(\"tic\"); // toc - tic = timespan\nmsg.topic = \"CycleTimePLCAcq\";\nmsg.payload = lTimeStamp - (context.TESTtime || 0); // cycle time\ncontext.TESTtime = lTimeStamp;\nreturn msg;\n/////////////////////////////////////// TEST ///////////////////////////////////\n} else {\n    if(bDiff === false || getLatestData(sTopic) !== jXPayload.toString()){\n//===== begin: Output ==================\n        flow.set(sTopic + \"Latest\", lTimeStamp.toString() + ';' + jXPayload.toString()+ '\\n');\n        var sBuffer = flow.get(sTopic + \"Buffer\")||\"\";\n        flow.set(sTopic + \"Buffer\", sBuffer + lTimeStamp.toString() + ';' + \n                                                    jXPayload.toString() + '\\n');\n//===== end:   Output ==================\n    }\n}\n//=============================== end:   Function ==============================\n\n\nfunction getLatestData(sTopic1){\n    var sLatestData = flow.get(sTopic1 + \"Latest\")||\";\";\n    var sLatestDataSplit = sLatestData.split(';'); // Splitting to Timestamp & Data\n    sLatestData = sLatestDataSplit[1]; // Fetching the data\n    sLatestData = sLatestData.substring(0,sLatestData.length - 1); // deleting the carriage return\n    return sLatestData;\n}","outputs":1,"noerr":0,"x":1781.7737731933594,"y":574.0547876358032,"wires":[["881d4f78.cf0d6"]]},{"id":"d75c355d.17a0c8","type":"function","z":"383e4cc7.b8b594","name":"Deriving Storage Parameters","func":"//=============================== begin: Header ================================\n// Author: Jürgen Buchner\n// E-Mail: Juergen.Buchner@tgw-group.com\n// Created: 30.01.2018\n// Function description: This function calculates the minor cycle time and the \n// amount of cycles each data class has based on the minor cycle. \n// E.g.: minorCycleTime = 100ms, DMSCycleTime = 400ms -> DMS is acquired every\n// fourth time.\n\n// Change Date: 06.03.2018\n// Changed By: Jürgen Buchner\n// Change:  Adding asDataclasses\n//          Restructuring: Putting all initialization executions in one loop \n//          instead of having three seperate loops\n// Change Date: 07.03.2018\n// Changed By: Jürgen Buchner\n// Change:  Adding asDataclasses[i] = \"MFR-Log\";\n//          flow.set(\"asDataClasses\"); -> flow.set(\"asDataClasses\",asDataClasses);\n// Change Date: 05.04.2018\n// Changed By: Jürgen Buchner\n// Change:  Add asDataClasses[i + 1] = \"BB.CPUTemp\";\n// Change Date: 09.04.2018\n// Changed By: Jürgen Buchner\n// Change:  mod new Array(Object.keys(jiDATACYCLETIMES).length + 2); \n//              -> new Array(Object.keys(jiDATACYCLETIMES).length); \n//              This was done to shift the decision of adding also special data \n//              classes, such as MFR from TCP or CPU temp. to Storage Parameters\n//=============================== end:   Header ================================\n\n//=============================== begin: Input =================================\n//===== begin: Message Data ============\nconst jiDATACYCLETIMES = msg.payload[0];\nconst asOtherData = msg.payload[1];\n//===== end:   Message Data ============\n//=============================== end:   Input =================================\n\n//=============================== begin: Initialization ========================\n\niMinorCycleTime = 2147483647; //Int32 Max\nvar iDataCycles = {};\nvar iDataCyclesCnt = {};\nvar asDataClasses = new Array(Object.keys(jiDATACYCLETIMES).length);\nvar i = 0;\nfor (var iCycleTimeName in jiDATACYCLETIMES){\n    // Get minimum cycle time\n    if (iMinorCycleTime > jiDATACYCLETIMES[iCycleTimeName]){\n        iMinorCycleTime = jiDATACYCLETIMES[iCycleTimeName];\n    }\n    \n    // Get cycles for each data class based on the minimum cycle time\n    iDataCycles[iCycleTimeName] = Math.round(jiDATACYCLETIMES[iCycleTimeName]/iMinorCycleTime);\n    iDataCyclesCnt[iCycleTimeName] = 1;\n    \n    // Storing the names of the values in an array\n    asDataClasses[i] = iCycleTimeName;\n    i = i + 1;\n}\nasDataClasses = asDataClasses.concat(asOtherData);\n//=============================== end:   Initialization ========================\n\n//===== begin: Output ==================\nflow.set(\"iDATACYCLES\",iDataCycles);\nflow.set(\"iDataCyclesCnt\",iDataCyclesCnt);\nflow.set(\"asDATACLASSES\",asDataClasses);\n/////////////////////////////////////// TEST ///////////////////////////////////\n//msg.payload = {\"Cycles\":iDataCycles,\"CyclesCnt\":iDataCyclesCnt};\nmsg.options = asDataClasses;\nreturn msg;\n/////////////////////////////////////// TEST ///////////////////////////////////\n//===== end:   Output ==================","outputs":1,"noerr":0,"x":1291.4617919921875,"y":138.01040649414062,"wires":[["75f1d2a5.9f221c"]]},{"id":"1ab6a038.6d9bb","type":"function","z":"383e4cc7.b8b594","name":"Global Variables","func":"//=============================== begin: Header ================================\n// Author: Jürgen Buchner\n// E-Mail: Juergen.Buchner@tgw-group.com\n// Created: 30.01.2018\n// Function description: This function initializes the global variables.\n\n// Change Date : 05.03.2018\n// Changed By: Jürgen Buchner\n// Change: Added the inizialization of the timestamp for comparison\n// Change Date: 07.03.2018\n// Changed By: Jürgen Buchner\n// Change: add filenamelist\n// Change Date: 21.03.2018\n// Changed By: Jürgen Buchner\n// Change: add sTimeSyncStatus & sTimeSyncStatusOld\n// Change Date: 28.03.2018\n// Changed By: Jürgen Buchner\n// Change:  mod date -> oDateLocal\n//          add global.set(\"bInitTimeSync\", true);\n// Change Date: 29.03.2018\n// Changed by: Jürgen Buchner\n// Change:  add flow.set(\"MFR-Log\" + \"Latest\", \"\");\n// This is done because the latest MFR should not be saved. This would be\n// confusing to have the same MFR log twice in the log\n// Change Date: 05.04.2018\n// Changed by: Jürgen Buchner\n// Change:  add flow.set(\"BB.CPUTemp\" + \"Latest\", \"\");\n// Change Date: 09.04.2018\n// Changed By: Jürgen Buchner\n// Change:  mod jiDATACYCLETIMES = msg.payload; -> msg.payload[0];\n// Change Date: 19.04.2018\n// Changed by: Jürgen Buchner\n// Change:  add for (i = 0; i < iCntExtraData;)... This is added that no\n// modification needs to be done in this node, if new data classes such as \n// CPU temperarture is added in Storage Parameters. This for loop initializes\n// the \"Latest\" values.\n//=============================== end:   Header ================================\n\n//=============================== begin: Input =================================\n//===== begin: Message Data ============\njiDATACYCLETIMES = msg.payload[0];\nasOtherData = msg.payload[1];\n//===== end:   Message Data ============\n//=============================== end:   Input =================================\n\n//=============================== begin: Initialization ========================\n// Initialize timestamp for comparison\n// Setting the timestamp to 00:00 of the current day in milliseconds\noDateLocal = new Date();\noDateLocal.setMilliseconds(0);\noDateLocal.setSeconds(0);\noDateLocal.setMinutes(0);\noDateLocal.setHours(0);\nglobal.set(\"previousDayMS\",oDateLocal.getTime());\nflow.set(\"UTCTime\",32503683661000); // Default Date: 3000-01-01\n\n// Inizialize Buffer and Latest Save\nfor (var sTopic0 in jiDATACYCLETIMES){\n    topicSplit = sTopic0.split('['); \n    var sTopic1 = topicSplit[0]; // Delete the unit of the variable name (e.g. \"DMS[mm]\"-> \"DMS\")\n    \n//===== begin: Output ==================\n    flow.set(sTopic1 + \"Latest\",\"\");\n    flow.set(sTopic1 + \"Buffer\",\"\");\n//===== end:   Output ==================\n}\nglobal.set('filenamelist',[]);\n\n// Time Synchronization\nglobal.set(\"sTimeSyncStatus\",\"SPS\");\nglobal.set(\"sTimeSyncStatusOld\",\"SPS\");\nglobal.set(\"bInitTimeSync\", true);\n\nfor (i = 0; i < asOtherData.length;i++){\n    flow.set(asOtherData[i] + \"Latest\", \"\");\n}\n// MFR\n//flow.set(\"MFR-Log\" + \"Latest\", \"\");\n// CPU-Temp\n//flow.set(\"BB.CPU.Temp\" + \"Latest\", \"\");\n// CPU-Utilization\n//flow.set(\"BB.CPU.Utilization\" + \"Latest\", \"\");\n//=============================== end:   Initialization ========================","outputs":1,"noerr":0,"x":1252,"y":108,"wires":[[]]},{"id":"e4721e5d.c10e6","type":"function","z":"383e4cc7.b8b594","name":"Add timestamp to value","func":"//=============================== begin: Header ================================\n// Author: Jürgen Buchner\n// E-Mail: Juergen.Buchner@tgw-group.com\n// Created: 30.01.2018\n// Function description: A timestamp is added to the data. The decision which \n// timestamp is chosen is based on the time synchronization status.\n\n// Change Date: 08.03.2018\n// Changed By: Jürgen Buchner\n// Change:  add SPSTime2UnixTime\n//          use SPS Time for MFR\n// Change Date: 20.03.2018\n// Changed By: Jürgen Buchner\n// Change:  mod iTimeSyncStatus => sTimeSyncStatus\n//          del var iUTCTime = msg.timestamp;\n//          del flow.set(\"UTCTime\",iUTCTime); \n// Change Date: 05.04.2018\n// Changed By: Jürgen Buchner\n// Change:  mod if(topic==\"TCP\") -> if(topic==\"TCP\" || topic == \"BB.CPUTemp\")\n// Change Date: 18.04.2018\n// Changed By: Jürgen Buchner\n// Change:  mod if(topic==\"TCP\" || topic == \"BB.CPUTemp\") -> if(topic==\"TCP\" || topic == \"BB.CPU.Temp\" || topic == \"BB.CPU.Utilization\")\n// Change Date: 19.04.2018\n// Changed By: Jürgen Buchner\n// Change:  del if(topic==\"TCP\" || topic == \"BB.CPU.Temp\" || topic == \"BB.CPUTemp\" )\n//          add if(asOtherData.includes(topic))\n//=============================== end:   Header ================================\n\n//=============================== begin: Input =================================\n//===== begin: Global Variables ========\nsTimeSyncStatus = global.get(\"sTimeSyncStatus\");\nvar asOtherData = flow.get(\"asOtherData\");\n//===== end:   Global Variables ========\n\n//===== begin: Message Data ============\ntopic = msg.topic;\n//===== end:   Message Data ============\n//=============================== end:   Input =================================\n\n//=============================== begin: Function ==============================\nif(sTimeSyncStatus == \"local\" || sTimeSyncStatus == \"NTP\"){\n    date = new Date();\n    msg.timestamp = date.getTime();\n}\nelse if (sTimeSyncStatus == \"SPS\"){\n    if(asOtherData.includes(topic)){ // Extra data which do not come from RFC 1006 get this timestamp\n        msg.timestamp = flow.get(\"LastSync\");\n    }\n    else{\n        // msg.timestamp is already the SPS timestamp   \n    }\n}\n//===== begin: Output ==================\nreturn msg;\n//===== end:   Output ==================\n//=============================== end:   Function ==============================","outputs":1,"noerr":0,"x":1502.0003051757812,"y":574.0001230239868,"wires":[["b979080a.2deab8","772a3bbd.c7244c"]]},{"id":"c6e94c37.263d9","type":"ui_button","z":"383e4cc7.b8b594","name":"","group":"c577412.52b9f4","order":1,"width":"3","height":"1","passthru":false,"label":"Clear Data","color":"","bgcolor":"","icon":"","payload":"[]","payloadType":"json","topic":"","x":1589.7696228027344,"y":109.0039119720459,"wires":[["354b2173.7ac06e"]]},{"id":"354b2173.7ac06e","type":"subflow:cdc50972.373978","z":"383e4cc7.b8b594","x":1759.6447143554688,"y":109.30469799041748,"wires":[["13b99a9e.8fdf65","881d4f78.cf0d6"]]},{"id":"c86b6fee.0755d8","type":"function","z":"383e4cc7.b8b594","name":"Add topic","func":"msg.topic = \"SPSDataRFC1006\";\nreturn msg;","outputs":1,"noerr":0,"x":920,"y":648,"wires":[["ca0d1b60.1d1fe"]]},{"id":"4bcaf94d.274c7","type":"mqtt out","z":"383e4cc7.b8b594","name":"","topic":"MustangRTEC/data","qos":"0","retain":"false","broker":"acd57f36.786f58","x":1617.019775390625,"y":854,"wires":[]},{"id":"772a3bbd.c7244c","type":"switch","z":"383e4cc7.b8b594","name":"Filter for RFC 1006","property":"topic","propertyType":"msg","rules":[{"t":"eq","v":"SPSDataRFC1006","vt":"str"}],"checkall":"true","outputs":1,"x":1509.51953125,"y":527.0039043426514,"wires":[["75f1d2a5.9f221c"]]},{"id":"86b1763c.3af6c8","type":"exec","z":"383e4cc7.b8b594","command":"mpstat -P 0","addpay":false,"append":"","useSpawn":"","timer":"","name":"Get CPU Utilization","x":930,"y":439,"wires":[["b69578ee.d90d38"],[],[]]},{"id":"439e7b5c.428ba4","type":"inject","z":"383e4cc7.b8b594","name":"3s","topic":"","payload":"","payloadType":"date","repeat":"3","crontab":"","once":false,"x":650,"y":439,"wires":[["86b1763c.3af6c8"]]},{"id":"b69578ee.d90d38","type":"function","z":"383e4cc7.b8b594","name":"Mean Calculation & Add topic","func":"//=============================== begin: Header ================================\n// Author: Jürgen Buchner\n// E-Mail: - - - EMAIL - - -\n// Created: - - - Date - - -\n// Function description: This function stores the cpu value (sum of incoming \n// values) and after six incoming values, the average is calculated. In \n// addition, the topic is added to the message.\n//=============================== end:   Header ================================\n\n//=============================== begin: Input =================================\n//===== begin: Message Data ============\nvar sMessage = msg.payload;\n//===== end:   Message Data ============\n//=============================== end:   Input =================================\n\n//=============================== begin: Function ==============================\nvar iAmount = 2;\nvar sLines = sMessage.split(\"\\n\");\nvar sEntries = sLines[3].split(\" \");\nvar sIdle = sEntries[sEntries.length - 1];\nvar iCPUUsage = 100 - Number(sIdle); // CPU usage\n\ncontext.cpuUsageSum = (context.cpuUsageSum || 0) + iCPUUsage;\ncontext.index = (context.index || 0) + 1;\nif(context.index == iAmount){\n    msg.payload = Math.round(context.cpuUsageSum/iAmount * 10)/10;\n    \n    context.cpuUsageSum = 0;\n    context.index = 0;\n    msg.topic = \"BB.CPU.Utilization\";\n//===== begin: Output ==================\n    return msg;\n//===== end:   Output ==================\n}\n//=============================== end:   Function ==============================\n","outputs":1,"noerr":0,"x":1210,"y":439,"wires":[["e4721e5d.c10e6","55759047.083dc8"]]},{"id":"55759047.083dc8","type":"ui_gauge","z":"383e4cc7.b8b594","name":"","group":"c577412.52b9f4","order":5,"width":"4","height":"4","gtype":"gage","title":"CPU Usage","label":"units","format":"{{value}}","min":0,"max":"100","colors":["#00b500","#e6e600","#ca3838"],"seg1":"","seg2":"","x":2028.3987426757812,"y":170.1446418762207,"wires":[]},{"id":"9e3ec21.5bb494","type":"ui_text","z":"383e4cc7.b8b594","group":"33155e9f.b13d02","order":4,"width":"3","height":"1","name":"","label":"Version","format":"{{msg.payload}}","layout":"row-spread","x":822.26953125,"y":39.00390625,"wires":[]},{"id":"d21da53d.115278","type":"inject","z":"383e4cc7.b8b594","name":"","topic":"","payload":"v1.2.5","payloadType":"str","repeat":"","crontab":"","once":true,"x":672.26953125,"y":39.00390625,"wires":[["9e3ec21.5bb494"]]},{"id":"b8c938f6.d8f6b8","type":"function","z":"383e4cc7.b8b594","name":"Logging Memory Fault Time","func":"//=============================== begin: Header ================================\n// Author: Jürgen Buchner\n// E-Mail: Juergen.Buchner@tgw-group.com\n// Created: 28.03.2018\n// Function description: This function logs when the blackbox cannot save data.\n//=============================== end:   Header ================================\n\n//=============================== begin: Function ==============================\nvar oDateLocal = new Date();\n//===== begin: Output ==================\nnode.send({payload: oDateLocal.getTime() + '\\n',topic:\"LogMemoryFaultTimes\"});\n//===== end:   Output ==================\n//=============================== end:   Function ==============================","outputs":1,"noerr":0,"x":1740,"y":1180,"wires":[["cbc1a8fe.3b208"]]},{"id":"c5f8662a.057668","type":"function","z":"383e4cc7.b8b594","name":"add UUIC","func":"msg.payload.UUIC = \"152106_MustangR_M01\";\nreturn msg;","outputs":1,"noerr":0,"x":924.1666946411133,"y":689.3333930969238,"wires":[["e018e044.560a9"]]},{"id":"86c7e771.407fc","type":"ui_chart","z":"383e4cc7.b8b594","name":"","group":"7ac50029.ad6678","order":0,"width":0,"height":0,"label":"x","chartType":"line","legend":"false","xformat":"HH:mm:ss","interpolate":"linear","nodata":"","dot":false,"ymin":"","ymax":"","removeOlder":1,"removeOlderPoints":"","removeOlderUnit":"60","cutout":0,"useOneColor":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":2,"x":900,"y":1528,"wires":[[],[]]},{"id":"a03292e8.6f32a","type":"ui_chart","z":"383e4cc7.b8b594","name":"","group":"7ac50029.ad6678","order":0,"width":0,"height":0,"label":"y","chartType":"line","legend":"false","xformat":"HH:mm:ss","interpolate":"linear","nodata":"","dot":false,"ymin":"","ymax":"","removeOlder":1,"removeOlderPoints":"","removeOlderUnit":"60","cutout":0,"useOneColor":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":2,"x":898,"y":1601,"wires":[[],[]]},{"id":"dfa892ad.9d03a8","type":"ui_chart","z":"383e4cc7.b8b594","name":"","group":"7ac50029.ad6678","order":0,"width":0,"height":0,"label":"z","chartType":"line","legend":"false","xformat":"HH:mm:ss","interpolate":"linear","nodata":"","dot":false,"ymin":"","ymax":"","removeOlder":1,"removeOlderPoints":"","removeOlderUnit":"60","cutout":0,"useOneColor":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":2,"x":896,"y":1674,"wires":[[],[]]},{"id":"8a947d95.0f66f8","type":"ui_chart","z":"383e4cc7.b8b594","name":"","group":"50c310c3.d21038","order":0,"width":0,"height":0,"label":"Temperature","chartType":"line","legend":"false","xformat":"HH:mm:ss","interpolate":"linear","nodata":"","dot":false,"ymin":"","ymax":"","removeOlder":"10","removeOlderPoints":"","removeOlderUnit":"60","cutout":0,"useOneColor":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":2,"x":922,"y":1868,"wires":[[],[]]},{"id":"ffc2a47b.02a6a","type":"ui_chart","z":"383e4cc7.b8b594","name":"","group":"50c310c3.d21038","order":0,"width":0,"height":0,"label":"Humidity","chartType":"line","legend":"false","xformat":"HH:mm:ss","interpolate":"linear","nodata":"","dot":false,"ymin":"","ymax":"","removeOlder":"10","removeOlderPoints":"","removeOlderUnit":"60","cutout":0,"useOneColor":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":2,"x":898,"y":1767,"wires":[[],[]]},{"id":"ab68a475.6e8748","type":"ui_dropdown","z":"383e4cc7.b8b594","name":"","label":"Temp-time","place":"Select option","group":"3e436b4a.df6a1c","order":0,"width":0,"height":0,"passthru":true,"options":[{"label":"1sec","value":"1000","type":"str"},{"label":"3sec","value":"3000","type":"str"},{"label":"5sec","value":"5000","type":"str"},{"label":"10sec","value":"10000","type":"str"},{"label":"30sec","value":"30000","type":"str"}],"payload":"","topic":"","x":624,"y":1946,"wires":[[]]},{"id":"66c196a5.73ba18","type":"ui_dropdown","z":"383e4cc7.b8b594","name":"","label":"acc-Time","place":"Select option","group":"3e436b4a.df6a1c","order":0,"width":0,"height":0,"passthru":true,"options":[{"label":"100ms","value":"100","type":"str"},{"label":"0.5sec","value":"500","type":"str"},{"label":"1sec","value":"1000","type":"str"}],"payload":"","topic":"","x":613,"y":2012,"wires":[[]]},{"id":"12858768.6b5399","type":"function","z":"383e4cc7.b8b594","name":"storeaccx","func":"global.set('acc.x',msg.payload);\nreturn msg;","outputs":1,"noerr":0,"x":1087,"y":1481,"wires":[[]]},{"id":"3bbe6d54.377daa","type":"function","z":"383e4cc7.b8b594","name":"storeaccy","func":"global.set('acc.y',msg.payload);\nreturn msg;","outputs":1,"noerr":0,"x":1079,"y":1562,"wires":[[]]},{"id":"ecc943d1.a8055","type":"function","z":"383e4cc7.b8b594","name":"storeaccz","func":"global.set('acc.z',msg.payload);\nreturn msg;","outputs":1,"noerr":0,"x":1085,"y":1637,"wires":[[]]},{"id":"1d300dd0.538cea","type":"function","z":"383e4cc7.b8b594","name":"storeambiancehumidity","func":"global.set('ambiance.humidity',msg.payload);\nreturn msg;","outputs":1,"noerr":0,"x":1043,"y":1728,"wires":[[]]},{"id":"fe43b706.df2ab","type":"function","z":"383e4cc7.b8b594","name":"storeambiancetemp","func":"global.set('ambiance.humidity',msg.payload);\nreturn msg;","outputs":1,"noerr":0,"x":1045,"y":1824,"wires":[[]]},{"id":"fb47d105.f668a8","type":"function","z":"383e4cc7.b8b594","name":"add all","func":"var val1 = global.get('acc.x');\nmsg.payload.acc_x = val1;\nvar val2 = global.get('acc.y');\nmsg.payload.acc_y = val2;\nvar val3 = global.get('acc.z');\nmsg.payload.acc_z = val3;\nvar val4 = global.get('ambiance.humidity');\nmsg.payload.ambiance_humidity = val4;\nvar val5 = global.get('ambiance.temp');\nmsg.payload.ambiance_temp = val5;\nreturn msg;","outputs":1,"noerr":0,"x":1315,"y":1484,"wires":[[]]},{"id":"7f0ba9e8.504488","type":"function","z":"383e4cc7.b8b594","name":"add UUIC","func":"msg.payload.UUIC= \"MustangRTEC\";\nreturn msg;","outputs":1,"noerr":0,"x":863,"y":2098,"wires":[["281607c2.b9858","34f7ca3.e229336"]]},{"id":"745de8e.97a5918","type":"mqtt out","z":"383e4cc7.b8b594","name":"","topic":"MustangRTEC/energy","qos":"1","retain":"true","broker":"acd57f36.786f58","x":1451,"y":2096.75,"wires":[]},{"id":"9e7f15bb.0267c","type":"s7 in","z":"383e4cc7.b8b594","endpoint":"8ebb7464.0ceaa","mode":"all","variable":"","diff":false,"name":"MustangRTEC","x":617,"y":645.72998046875,"wires":[["c86b6fee.0755d8","c5f8662a.057668","f982ad98.af7798"]]},{"id":"e018e044.560a9","type":"function","z":"383e4cc7.b8b594","name":"SPS to Unix time","func":"//=============================== begin: Header ================================\n// Author: Jürgen Buchner\n// E-Mail: Juergen.Buchner@tgw-group.com\n// Created: 08.03.2018\n// Function description: this function converts the SPS time to the unix time.\n//  SPS time:   - UTC, \n//              - 8 Bytes: Year, Month, Day, Hour, Minute, Second (each is a byte)\n//                          Milliseconds is two bytes\n// Unix time: milliseconds from 1.1.1970\n\n// Change Date: 21.03.2018\n// Changed by: Jürgen Buchner\n// Change: add msg.SPSTime = date.getTime();\n// Change Date: 22.03.2018\n// Changed by: Jürgen Buchner\n// Change: mod minute2mSec.toString(16) -> ('00000000'+(minute2mSec).toString(16)).substr(-8)\n// Leading zeros are added to always have 8 digits\n//=============================== end:   Header ================================\n\n/////////////////////////////////////// TEST ///////////////////////////////////\ndate = new Date();\nflow.set(\"tic\",date.getTime());\n/////////////////////////////////////// TEST ///////////////////////////////////\n\n//=============================== begin: Input =================================\n//===== begin: Parameters ==============\nconst SPSTIMEYEAR2HOUR = global.get(\"SPSUTCTimeYear2Hour\");\nconst SPSTIMEMIN2MSEC = global.get(\"SPSUTCTimeMinute2mSec\");\n//===== end:   Parameters ==============\n\nvar year2hour = msg.payload[SPSTIMEYEAR2HOUR];\nvar minute2mSec = msg.payload[SPSTIMEMIN2MSEC];\n//=============================== end:   Input =================================\n\n//=============================== begin: Function ==============================\nvar sHEXyear2hour = ('00000000'+(year2hour).toString(16)).substr(-8);\nvar sHEXminute2mSec = ('00000000'+(minute2mSec).toString(16)).substr(-8);\nvar year = \"20\" + sHEXyear2hour.substring(0,2);\nvar month = sHEXyear2hour.substring(2,4);\nvar day = sHEXyear2hour.substring(4,6);\nvar hour = sHEXyear2hour.substring(6,8);\n\nvar minute = sHEXminute2mSec.substring(0,2);\nvar second = sHEXminute2mSec.substring(2,4);\nvar millisecond = sHEXminute2mSec.substring(4,7);\n\ndate = new Date(parseInt(year),parseInt(month)-1,parseInt(day),parseInt(hour),parseInt(minute),parseInt(second),parseInt(millisecond));\n//msg.timestamp = date.getTime();\nmsg.payload.SPSTime = date.getTime();\n//===== begin: Output ==================\nreturn msg;\n//===== end:   Output ==================\n//=============================== end:   Function ==============================","outputs":1,"noerr":0,"x":1244,"y":854,"wires":[["4bcaf94d.274c7"]]},{"id":"281607c2.b9858","type":"function","z":"383e4cc7.b8b594","name":"Energy2Unix","func":"//=============================== begin: Header ================================\n// Author: Jürgen Buchner\n// E-Mail: Juergen.Buchner@tgw-group.com\n// Created: 08.03.2018\n// Function description: this function converts the SPS time to the unix time.\n//  SPS time:   - UTC, \n//              - 8 Bytes: Year, Month, Day, Hour, Minute, Second (each is a byte)\n//                          Milliseconds is two bytes\n// Unix time: milliseconds from 1.1.1970\n\n// Change Date: 21.03.2018\n// Changed by: Jürgen Buchner/copy through WEC\n// Change: add msg.SPSTime = date.getTime();\n// Change Date: 22.03.2018\n// Changed by: Jürgen Buchner\n// Change: mod minute2mSec.toString(16) -> ('00000000'+(minute2mSec).toString(16)).substr(-8)\n// Leading zeros are added to always have 8 digits\n//=============================== end:   Header ================================\n\n/////////////////////////////////////// TEST ///////////////////////////////////\ndate = new Date();\nflow.set(\"tic\",date.getTime());\n/////////////////////////////////////// TEST ///////////////////////////////////\n\n//=============================== begin: Input =================================\n//===== begin: Parameters ==============\nconst SPSTIMEYEAR2HOUR = global.get(\"SPSUTCTimeYear2Hour\");\nconst SPSTIMEMIN2MSEC = global.get(\"SPSUTCTimeMinute2mSec\");\n//===== end:   Parameters ==============\n\nvar year2hour = msg.payload[SPSTIMEYEAR2HOUR];\nvar minute2mSec = msg.payload[SPSTIMEMIN2MSEC];\n//=============================== end:   Input =================================\n\n//=============================== begin: Function ==============================\nvar sHEXyear2hour = ('00000000'+(year2hour).toString(16)).substr(-8);\nvar sHEXminute2mSec = ('00000000'+(minute2mSec).toString(16)).substr(-8);\nvar year = \"20\" + sHEXyear2hour.substring(0,2);\nvar month = sHEXyear2hour.substring(2,4);\nvar day = sHEXyear2hour.substring(4,6);\nvar hour = sHEXyear2hour.substring(6,8);\n\nvar minute = sHEXminute2mSec.substring(0,2);\nvar second = sHEXminute2mSec.substring(2,4);\nvar millisecond = sHEXminute2mSec.substring(4,7);\n\ndate = new Date(parseInt(year),parseInt(month)-1,parseInt(day),parseInt(hour),parseInt(minute),parseInt(second),parseInt(millisecond));\n//msg.timestamp = date.getTime();\nmsg.payload.SPSTime = date.getTime();\n//===== begin: Output ==================\nreturn msg;\n//===== end:   Output ==================\n//=============================== end:   Function ==============================","outputs":1,"noerr":0,"x":1096.25,"y":2095.2500610351562,"wires":[["745de8e.97a5918"]]},{"id":"67be166a.45c1b","type":"debug","z":"383e4cc7.b8b594","name":"","active":true,"console":false,"complete":"payload.ActiveEnergyConsumption","x":1336,"y":2174,"wires":[]},{"id":"1f7cb5af.42db7a","type":"ui_text","z":"383e4cc7.b8b594","group":"6ea604ba.efeec4","order":1,"width":0,"height":0,"name":"","label":"Active Energy Consumption TLS [kWh]","format":"{{msg.payload.ActiveEnergyConsumption[1]}}","layout":"row-spread","x":1336,"y":2234,"wires":[]},{"id":"34f7ca3.e229336","type":"function","z":"383e4cc7.b8b594","name":"convertvalues","func":"var text=\"{\";\nvar value = 0;\n\nif (msg.payload.ActiveEnergyConsumption!==\"undefined\")\n  {\n   value = msg.payload.ActiveEnergyConsumption[0] * 65536  + msg.payload.ActiveEnergyConsumption[1];\n   puffer = msg.payload.ActiveEnergyConsumption[0];\n   msg.payload.ActiveEnergyConsumption[0] = msg.payload.ActiveEnergyConsumption[1];\n   msg.payload.ActiveEnergyConsumption[1] = puffer;\n   var ui16 = new Uint16Array(msg.payload.ActiveEnergyConsumption);\n   var fl32 = new Float32Array(ui16.buffer, ui16.byteOffset, ui16.byteLength / Float32Array.BYTES_PER_ELEMENT);\n\n   msg.payload.ActiveEnergyConsumption[1]=Math.round(fl32);\n  }\nif (msg.payload.BlindEnergyConsumption!==\"undefined\")\n  {\n   value = msg.payload.BlindEnergyConsumption[0] * 65536  + msg.payload.BlindEnergyConsumption[1];     \n   puffer = msg.payload.BlindEnergyConsumption[0];\n   msg.payload.BlindEnergyConsumption[0] = msg.payload.BlindEnergyConsumption[1];\n   msg.payload.BlindEnergyConsumption[1] = puffer;\n   var ui16 = new Uint16Array(msg.payload.BlindEnergyConsumption);\n   var fl32 = new Float32Array(ui16.buffer, ui16.byteOffset, ui16.byteLength / Float32Array.BYTES_PER_ELEMENT);\n   msg.payload.BlindEnergyConsumption[1]=Math.round(fl32);\n  }\nif (msg.payload.DeliveredActiveEnergy!==\"undefined\")\n  {\n   value = msg.payload.DeliveredActiveEnergy[0] * 65536  + msg.payload.DeliveredActiveEnergy[1];     \n   puffer = msg.payload.DeliveredActiveEnergy[0];\n   msg.payload.DeliveredActiveEnergy[0] = msg.payload.DeliveredActiveEnergy[1];\n   msg.payload.DeliveredActiveEnergy[1] = puffer;\n   var ui16 = new Uint16Array(msg.payload.DeliveredActiveEnergy);\n   var fl32 = new Float32Array(ui16.buffer, ui16.byteOffset, ui16.byteLength / Float32Array.BYTES_PER_ELEMENT);\n   msg.payload.DeliveredActiveEnergy[1]=Math.round(fl32);\n  }\nif (msg.payload.BlindEnergyDelivered!==\"undefined\")\n  {\n   value = msg.payload.BlindEnergyDelivered[0] * 65536  + msg.payload.BlindEnergyDelivered[1];     \n   puffer = msg.payload.BlindEnergyDelivered[0];\n   msg.payload.BlindEnergyDelivered[0] = msg.payload.BlindEnergyDelivered[1];\n   msg.payload.BlindEnergyDelivered[1] = puffer;\n   var ui16 = new Uint16Array(msg.payload.BlindEnergyDelivered);\n   var fl32 = new Float32Array(ui16.buffer, ui16.byteOffset, ui16.byteLength / Float32Array.BYTES_PER_ELEMENT);\n   msg.payload.BlindEnergyDelivered[1]=Math.round(fl32);\n  }\nif (msg.payload.MaximalCurrentValue!==\"undefined\")\n  {\n   value = msg.payload.MaximalCurrentValue[0] * 65536  + msg.payload.MaximalCurrentValue[1];     \n   puffer = msg.payload.MaximalCurrentValue[0];\n   msg.payload.MaximalCurrentValue[0] = msg.payload.MaximalCurrentValue[1];\n   msg.payload.MaximalCurrentValue[1] = puffer;\n   var ui16 = new Uint16Array(msg.payload.MaximalCurrentValue);\n   var fl32 = new Float32Array(ui16.buffer, ui16.byteOffset, ui16.byteLength / Float32Array.BYTES_PER_ELEMENT);\n   msg.payload.MaximalCurrentValue[1]=Math.round(fl32);\n  }\n\n\nreturn msg;","outputs":1,"noerr":0,"x":976,"y":2234,"wires":[["67be166a.45c1b","1f7cb5af.42db7a","9053785.2f45788","b875cff4.7a4168","73b4a6c6.f8f7c","c4118910.f0f3e"]]},{"id":"9053785.2f45788","type":"ui_text","z":"383e4cc7.b8b594","group":"6ea604ba.efeec4","order":1,"width":0,"height":0,"name":"","label":"Blind Energy Consumption TLS [kVARh]","format":"{{msg.payload.BlindEnergyConsumption[1]}}","layout":"row-spread","x":1336,"y":2274,"wires":[]},{"id":"b875cff4.7a4168","type":"ui_text","z":"383e4cc7.b8b594","group":"6ea604ba.efeec4","order":1,"width":0,"height":0,"name":"","label":"Delivered Active Energy TLS [kWh]","format":"{{msg.payload.DeliveredActiveEnergy[1]}}","layout":"row-spread","x":1316,"y":2314,"wires":[]},{"id":"73b4a6c6.f8f7c","type":"ui_text","z":"383e4cc7.b8b594","group":"6ea604ba.efeec4","order":1,"width":0,"height":0,"name":"","label":"Blind Energy Delivered TLS [kVARh]","format":"{{msg.payload.BlindEnergyDelivered[1]}}","layout":"row-spread","x":1326,"y":2354,"wires":[]},{"id":"c4118910.f0f3e","type":"ui_text","z":"383e4cc7.b8b594","group":"6ea604ba.efeec4","order":1,"width":0,"height":0,"name":"","label":"Maximal Current Value [A]","format":"{{msg.payload.MaximalCurrentValue[1]}}","layout":"row-spread","x":1286,"y":2394,"wires":[]},{"id":"f1b3b029.e17f3","type":"modbustcp-read","z":"383e4cc7.b8b594","name":"ActiveEnergyConsumption","topic":"","dataType":"HoldingRegister","adr":"2699","quantity":"2","rate":"1","rateUnit":"s","server":"ee141540.9ec9b8","x":390,"y":2062,"wires":[["a7640c05.0fdb58"]]},{"id":"a7640c05.0fdb58","type":"join","z":"383e4cc7.b8b594","name":"","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","timeout":"","count":"5","x":644,"y":2114,"wires":[["7f0ba9e8.504488"]]},{"id":"d0559b42.aa1258","type":"modbustcp-read","z":"383e4cc7.b8b594","name":"BlindEnergyConsumption","topic":"","dataType":"HoldingRegister","adr":"2707","quantity":"2","rate":"1","rateUnit":"s","server":"ee141540.9ec9b8","x":389,"y":2123,"wires":[["a7640c05.0fdb58"]]},{"id":"2965eeda.369302","type":"modbustcp-read","z":"383e4cc7.b8b594","name":"DeliveredActiveEnergy","topic":"","dataType":"HoldingRegister","adr":"2701","quantity":"2","rate":"1","rateUnit":"s","server":"ee141540.9ec9b8","x":385,"y":2186,"wires":[["a7640c05.0fdb58"]]},{"id":"f924d02d.c3529","type":"modbustcp-read","z":"383e4cc7.b8b594","name":"BlindEnergyDelivered","topic":"","dataType":"HoldingRegister","adr":"2709","quantity":"2","rate":"1","rateUnit":"s","server":"ee141540.9ec9b8","x":376,"y":2241,"wires":[["a7640c05.0fdb58"]]},{"id":"83f6a221.ab2e3","type":"modbustcp-read","z":"383e4cc7.b8b594","name":"MaximalCurrentValue","topic":"","dataType":"HoldingRegister","adr":"3009","quantity":"2","rate":"1","rateUnit":"s","server":"ee141540.9ec9b8","x":376,"y":2308,"wires":[["a7640c05.0fdb58"]]},{"id":"6ecc39f5.d05a7","type":"function","z":"383e4cc7.b8b594","name":"add Remaining Useful life","func":"msg.payload = msg.payload.TrvDrv.DstRet;\nreturn msg;","outputs":1,"noerr":0,"x":972,"y":598,"wires":[[]]},{"id":"f982ad98.af7798","type":"debug","z":"383e4cc7.b8b594","name":"","active":true,"console":"false","complete":"payload","x":914,"y":550,"wires":[]},{"id":"c577412.52b9f4","type":"ui_group","z":"","name":"Memory Usage","tab":"83b928c3.7a9c38","disp":true,"width":"12"},{"id":"acd57f36.786f58","type":"mqtt-broker","z":"","name":"","broker":"10.14.12.142","port":"2883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""},{"id":"7ac50029.ad6678","type":"ui_group","z":"","name":"acc","tab":"c389be4b.f9913","order":1,"disp":true,"width":"6"},{"id":"50c310c3.d21038","type":"ui_group","z":"","name":"ambiance","tab":"c389be4b.f9913","order":2,"disp":true,"width":"6"},{"id":"3e436b4a.df6a1c","type":"ui_group","z":"","name":"settings","tab":"c389be4b.f9913","order":3,"disp":true,"width":"6"},{"id":"8ebb7464.0ceaa","type":"s7 endpoint","z":"","address":"127.0.0.1","port":"102","rack":"0","slot":"2","localtsaphi":"01","localtsaplo":"00","remotetsaphi":"01","remotetsaplo":"00","connmode":"rack-slot","cycletime":"100","timeout":"1500","verbose":"on","name":"MustangRTEC","vartable":[{"addr":"DB4902,DInt1222","name":"TrvDrv.OpHrRet"},{"addr":"DB4902,DInt1226","name":"TrvDrv.OpHr"},{"addr":"DB4902,DInt1230","name":"TrvDrv.DstRet"},{"addr":"DB4902,DInt1234","name":"TrvDrv.Dst"},{"addr":"DB4902,DWORD2636","name":"TrvDrv.ErrorCode"},{"addr":"DB4902,DInt2612","name":"TrvDrv.ActPos"},{"addr":"DB4902,Int2616","name":"TrvDrv.ActVelo"},{"addr":"DB4902,DInt2608","name":"TrvDrv.TargetPos"},{"addr":"DB4902,Int1602","name":"TrvDrv.SetpVelo"},{"addr":"DB4902,Int1604","name":"TrvDrv.SetpAcc"},{"addr":"DB4902,Int1606","name":"TrvDrv.SetpDec"},{"addr":"DB4902,DInt1586","name":"TrvDrv.ActMotorPos"},{"addr":"DB4902,Int1576","name":"TrvDrv.ActMotorTorque"},{"addr":"DB4905,DInt918","name":"LiftDrv.OpHrRet"},{"addr":"DB4905,DInt922","name":"LiftDrv.OpHr"},{"addr":"DB4905,DInt926","name":"LiftDrv.DstRet"},{"addr":"DB4905,DInt930","name":"LiftDrv.Dst"},{"addr":"DB4905,DWORD2018","name":"LiftDrv.ErrorCode"},{"addr":"DB4905,DInt1994","name":"LiftDrv.ActPos"},{"addr":"DB4905,Int1998","name":"LiftDrv.ActVelo"},{"addr":"DB4905,DInt1990","name":"LiftDrv.TargetPos"},{"addr":"DB4905,Int1172","name":"LiftDrv.SetpVelo"},{"addr":"DB4905,Int1174","name":"LiftDrv.SetpAcc"},{"addr":"DB4905,Int1176","name":"LiftDrv.SetpDec"},{"addr":"DB4905,DInt1142","name":"LiftDrv.ActMotorPos"},{"addr":"DB4905,Int1146","name":"LiftDrv.ActMotorTorque"},{"addr":"DB1,DInt14","name":"UTCTimeYear2Hour"},{"addr":"DB1,DInt18","name":"UTCTimeMinute2mSec"}]},{"id":"6ea604ba.efeec4","type":"ui_group","z":"","name":"TLS","tab":"600cce05.69b2c8","order":4,"disp":true,"width":"11"},{"id":"ee141540.9ec9b8","type":"modbustcp-server","z":"","name":"","host":"127.0.0.1","port":"502","unit_id":"1","reconnecttimeout":"5"},{"id":"83b928c3.7a9c38","type":"ui_tab","z":"","name":"Device Statistics","icon":"dashboard","order":5},{"id":"c389be4b.f9913","type":"ui_tab","z":"","name":"sensor","icon":"dashboard","order":4},{"id":"600cce05.69b2c8","type":"ui_tab","z":"","name":"Energy Data","icon":"dashboard","order":2}]